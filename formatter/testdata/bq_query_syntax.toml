# Tests cases of examples from BigQuery's documentation.
[setup]

[setup.print_options]
soft_max_cols = 80
newline_before_clause = true
align_logical_with_clauses = true
column_list_trailing_comma = "NEVER"
indentation = 1
indent_with_clause = true
indent_with_entries = true
min_joins_to_separate_in_blocks = 1
max_cols_for_single_line_select = 4
function_name_style = "UPPER_CASE"
identifier_style = "AS_IS"
keyword_style = "UPPER_CASE"
type_style = "UPPER_CASE"
bool_style = "UPPER_CASE"
null_style = "UPPER_CASE"
bytes_style = "PREFER_SINGLE_QUOTE"
string_style = "PREFER_SINGLE_QUOTE"

[[cases]]
description = "SELECT *"
input = """
SELECT * FROM (SELECT "apple" AS fruit, "carrot" AS vegetable);
"""
formatted = """
SELECT *
  FROM (
         SELECT 'apple'  AS fruit,
                'carrot' AS vegetable
       )
"""

[[cases]]
description = "SELECT expression.*"
input = """
WITH groceries AS
  (SELECT "milk" AS dairy,
   "eggs" AS protein,
   "bread" AS grain)
SELECT g.*
FROM groceries AS g;

"""
formatted = """
WITH
  groceries AS (
    SELECT 'milk'  AS dairy,
           'eggs'  AS protein,
           'bread' AS grain
  )
SELECT g.*
  FROM groceries AS g
"""

[[cases]]
description = "SELECT expression.*"
input = """
WITH locations AS
  (SELECT ARRAY<STRUCT<city STRING, state STRING>>[("Seattle", "Washington"),
    ("Phoenix", "Arizona")] AS location)
SELECT l.LOCATION[offset(0)].*
FROM locations l;

"""
formatted = """
WITH
  locations AS (
    SELECT ARRAY<
             STRUCT<city STRING, state STRING>
           >[
             ('Seattle', 'Washington'),
             ('Phoenix', 'Arizona')
           ] AS location
  )
SELECT l.LOCATION[OFFSET(0)].*
  FROM locations AS l
"""

[[cases]]
description = "SELECT * EXCEPT"
input = """
WITH orders AS
  (SELECT 5 as order_id,
  "sprocket" as item_name,
  200 as quantity)
SELECT * EXCEPT (order_id)
FROM orders;

"""
formatted = """
WITH
  orders AS (
    SELECT 5          AS order_id,
           'sprocket' AS item_name,
           200        AS quantity
  )
SELECT * EXCEPT(order_id)
  FROM orders
"""

[[cases]]
description = "SELECT * EXCEPT"
input = """
WITH orders AS
  (SELECT 5 as order_id,
  "sprocket" as item_name,
  200 as quantity)
SELECT * EXCEPT (order_id)
FROM orders;

"""
formatted = """
WITH
  orders AS (
    SELECT 5          AS order_id,
           'sprocket' AS item_name,
           200        AS quantity
  )
SELECT * EXCEPT(order_id)
  FROM orders
"""

[[cases]]
description = "SELECT * REPLACE"
input = """
WITH orders AS
  (SELECT 5 as order_id,
  "sprocket" as item_name,
  200 as quantity)
SELECT * REPLACE ("widget" AS item_name)
FROM orders;

"""
formatted = """
WITH
  orders AS (
    SELECT 5          AS order_id,
           'sprocket' AS item_name,
           200        AS quantity
  )
SELECT *
       REPLACE(
         'widget' AS item_name
       )
  FROM orders
"""

[[cases]]
description = "SELECT * REPLACE"
input = """
WITH orders AS
  (SELECT 5 as order_id,
  "sprocket" as item_name,
  200 as quantity)
SELECT * REPLACE (quantity/2 AS quantity)
FROM orders;

"""
formatted = """
WITH
  orders AS (
    SELECT 5          AS order_id,
           'sprocket' AS item_name,
           200        AS quantity
  )
SELECT *
       REPLACE(
         quantity / 2 AS quantity
       )
  FROM orders
"""

[[cases]]
description = "SELECT AS STRUCT"
input = """
SELECT ARRAY(SELECT AS STRUCT 1 a, 2 b)
"""
formatted = """
SELECT ARRAY(
         SELECT AS STRUCT
                1 AS a,
                2 AS b
       )
"""

[[cases]]
description = "SELECT AS VALUE"
input = """
SELECT AS VALUE STRUCT(1 AS a, 2 AS b) xyz
"""
formatted = """
SELECT AS VALUE
       STRUCT(1 AS a, 2 AS b) AS xyz
"""

[[cases]]
description = "FROM clause: FOR SYSTEM_TIME AS OF"
input = """
SELECT *
FROM t
  FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR);
"""
formatted = """
SELECT *
  FROM t
       FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR)
"""

[[cases]]
description = "FROM clause: FOR SYSTEM_TIME AS OF"
input = """
SELECT *
FROM t
  FOR SYSTEM_TIME AS OF "2017-01-01 10:00:00-07:00";
"""
formatted = """
SELECT *
  FROM t
       FOR SYSTEM_TIME AS OF '2017-01-01 10:00:00-07:00'
"""

[[cases]]
description = "FROM clause: FOR SYSTEM_TIME AS OF"
input = """
SELECT *
FROM t1
WHERE t1.a IN (SELECT t2.a
               FROM t2 FOR SYSTEM_TIME AS OF t1.timestamp_column);
"""
formatted = """
SELECT *
  FROM t1
 WHERE t1.a IN (
         SELECT t2.a
           FROM t2
                FOR SYSTEM_TIME AS OF t1.timestamp_column
       )
"""

[[cases]]
description = "FROM clause: FOR SYSTEM_TIME AS OF"
input = """
DECLARE before_replace_timestamp TIMESTAMP;

-- Create table books.
CREATE TABLE books AS
SELECT 'Hamlet' title, 'William Shakespeare' author;

-- Get current timestamp before table replacement.
SET before_replace_timestamp = CURRENT_TIMESTAMP();

-- Replace table with different schema(title and release_date).
CREATE OR REPLACE TABLE books AS
SELECT 'Hamlet' title, DATE '1603-01-01' release_date;

-- This query returns Hamlet, William Shakespeare as result.
SELECT * FROM books FOR SYSTEM_TIME AS OF before_replace_timestamp;
"""
formatted = """
DECLARE before_replace_timestamp TIMESTAMP;

-- Create table books.
CREATE TABLE books
AS
SELECT 'Hamlet'              AS title,
       'William Shakespeare' AS author;

-- Get current timestamp before table replacement.
SET before_replace_timestamp = CURRENT_TIMESTAMP();

-- Replace table with different schema(title and release_date).
CREATE OR REPLACE TABLE books
AS
SELECT 'Hamlet'          AS title,
       DATE '1603-01-01' AS release_date;

-- This query returns Hamlet, William Shakespeare as result.
SELECT *
  FROM books
       FOR SYSTEM_TIME AS OF before_replace_timestamp;
"""

[[cases]]
description = ""
input = """
DECLARE JOB_START_TIMESTAMP TIMESTAMP;

-- Create table books.
CREATE OR REPLACE TABLE books AS
SELECT 'Hamlet' title, 'William Shakespeare' author;

-- Insert two rows into the books.
INSERT books (title, author)
VALUES('The Great Gatsby', 'F. Scott Fizgerald'),
      ('War and Peace', 'Leo Tolstoy');

SELECT * FROM books;

SET JOB_START_TIMESTAMP = (
  SELECT start_time
  FROM `region-us`.INFORMATION_SCHEMA.JOBS_BY_USER
  WHERE job_type="QUERY"
    AND statement_type="INSERT"
  ORDER BY start_time DESC
  LIMIT 1
 );

-- This query only returns Hamlet, William Shakespeare as result.
SELECT * FROM books FOR SYSTEM_TIME AS OF JOB_START_TIMESTAMP;

"""
formatted = """
DECLARE JOB_START_TIMESTAMP TIMESTAMP;

-- Create table books.
CREATE OR REPLACE TABLE books
AS
SELECT 'Hamlet'              AS title,
       'William Shakespeare' AS author;

-- Insert two rows into the books.
INSERT books
  (title, author)
VALUES
  ('The Great Gatsby', 'F. Scott Fizgerald'),
  ('War and Peace', 'Leo Tolstoy');

SELECT *
  FROM books;

SET JOB_START_TIMESTAMP = (
  SELECT start_time
    FROM `region-us`.INFORMATION_SCHEMA.JOBS_BY_USER
   WHERE job_type       = 'QUERY'
     AND statement_type = 'INSERT'
   ORDER BY start_time DESC
   LIMIT 1
);

-- This query only returns Hamlet, William Shakespeare as result.
SELECT *
  FROM books
       FOR SYSTEM_TIME AS OF JOB_START_TIMESTAMP;
"""

[[cases]]
description = """
Valid SQL but query would fail because the DML operates on the current
version of the table, and a historical version of the table from one day ago.
"""
input = """
INSERT INTO t1
SELECT * FROM t1
  FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY);
"""
formatted = """
INSERT INTO t1
SELECT *
  FROM t1
       FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY)
"""

[[cases]]
description = """
In the FROM clause, field_path is any path that resolves to a field
within a data type. field_path can go arbitrarily deep into a nested
data structure.
"""
input = """
SELECT * FROM T1 t1, t1.array_column;

SELECT * FROM T1 t1, t1.struct_column.array_field;

SELECT (SELECT ARRAY_AGG(c) FROM t1.array_column c) FROM T1 t1;

SELECT a.struct_field1 FROM T1 t1, t1.array_of_structs a;

SELECT (SELECT STRING_AGG(a.struct_field1) FROM t1.array_of_structs a) FROM T1 t1;

"""
formatted = """
SELECT *
  FROM T1 AS t1,
       t1.array_column;

SELECT *
  FROM T1 AS t1,
       t1.struct_column.array_field;

SELECT (
         SELECT ARRAY_AGG(c)
           FROM t1.array_column AS c
       )
  FROM T1 AS t1;

SELECT a.struct_field1
  FROM T1 AS t1,
       t1.array_of_structs AS a;

SELECT (
         SELECT STRING_AGG(a.struct_field1)
           FROM t1.array_of_structs AS a
       )
  FROM T1 AS t1;
"""

[[cases]]
description = "Common table expressions (CTEs)"
input = """
WITH
  subQ1 AS (SELECT * FROM Roster WHERE SchoolID = 52),
  subQ2 AS (SELECT SchoolID FROM subQ1)
SELECT DISTINCT * FROM subQ2;
"""
formatted = """
WITH
  subQ1 AS (
    SELECT *
      FROM Roster
     WHERE SchoolID = 52
  ),
  subQ2 AS (
    SELECT SchoolID
      FROM subQ1
  )
SELECT DISTINCT *
  FROM subQ2
"""

[[cases]]
description = "UNNEST operator"
input = """
SELECT * FROM UNNEST ([10,20,30]) as numbers WITH OFFSET;
"""
formatted = """
SELECT *
  FROM UNNEST([10, 20, 30]) AS numbers WITH OFFSET
"""

[[cases]]
description = ""
input = """
SELECT *
FROM UNNEST(
  ARRAY<
    STRUCT<
      x INT64,
      y STRING,
      z STRUCT<a INT64, b INT64>>>[
        (1, 'foo', (10, 11)),
        (3, 'bar', (20, 21))]);
"""
formatted = """
SELECT *
  FROM UNNEST(ARRAY<
                STRUCT<
                  x INT64,
                  y STRING,
                  z STRUCT<a INT64, b INT64>
                >
              >[
                (
                  1,
                  'foo',
                  (10, 11)
                ),
                (
                  3,
                  'bar',
                  (20, 21)
                )
              ])
"""

[[cases]]
description = "Explicit UNNEST"
input = """
WITH Coordinates AS (SELECT [1,2] AS position)
SELECT results FROM Coordinates, UNNEST(Coordinates.position) AS results;
"""
formatted = """
WITH
  Coordinates AS (
    SELECT [1, 2] AS position
  )
SELECT results
  FROM Coordinates,
       UNNEST(Coordinates.position) AS results
"""

[[cases]]
description = "Implicit UNNEST"
input = """
WITH Coordinates AS (SELECT [1,2] AS position)
SELECT results FROM Coordinates, Coordinates.position AS results;
"""
formatted = """
WITH
  Coordinates AS (
    SELECT [1, 2] AS position
  )
SELECT results
  FROM Coordinates,
       Coordinates.position AS results
"""

[[cases]]
description = "PIVOT operator"
input = """
WITH Produce AS (
  SELECT 'Kale' as product, 51 as sales, 'Q1' as quarter, 2020 as year UNION ALL
  SELECT 'Kale', 23, 'Q2', 2020 UNION ALL
  SELECT 'Kale', 45, 'Q3', 2020 UNION ALL
  SELECT 'Kale', 3, 'Q4', 2020 UNION ALL
  SELECT 'Kale', 70, 'Q1', 2021 UNION ALL
  SELECT 'Kale', 85, 'Q2', 2021 UNION ALL
  SELECT 'Apple', 77, 'Q1', 2020 UNION ALL
  SELECT 'Apple', 0, 'Q2', 2020 UNION ALL
  SELECT 'Apple', 1, 'Q1', 2021)
SELECT * FROM Produce
  PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3', 'Q4'))
"""
formatted = """
WITH
  Produce AS (
    SELECT 'Kale' AS product,
           51     AS sales,
           'Q1'   AS quarter,
           2020   AS year
     UNION ALL
    SELECT 'Kale', 23, 'Q2', 2020
     UNION ALL
    SELECT 'Kale', 45, 'Q3', 2020
     UNION ALL
    SELECT 'Kale', 3, 'Q4', 2020
     UNION ALL
    SELECT 'Kale', 70, 'Q1', 2021
     UNION ALL
    SELECT 'Kale', 85, 'Q2', 2021
     UNION ALL
    SELECT 'Apple', 77, 'Q1', 2020
     UNION ALL
    SELECT 'Apple', 0, 'Q2', 2020
     UNION ALL
    SELECT 'Apple', 1, 'Q1', 2021
  )
SELECT *
  FROM Produce
       PIVOT (
         SUM(sales)
         FOR quarter IN ('Q1', 'Q2', 'Q3', 'Q4')
       )
"""

[[cases]]
description = "PIVOT operator"
input = """
SELECT * FROM
  (SELECT sales, quarter FROM Produce)
  PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2', 'Q3'))
"""
formatted = """
SELECT *
  FROM (
         SELECT sales, quarter
           FROM Produce
       )
       PIVOT (
         SUM(sales)
         FOR quarter IN ('Q1', 'Q2', 'Q3')
       )
"""

[[cases]]
description = "UNPIVOT operator"
input = """
SELECT * FROM Produce
UNPIVOT(sales FOR quarter IN (Q1, Q2, Q3, Q4))
"""
formatted = """
SELECT *
  FROM Produce
       UNPIVOT (
         sales
         FOR quarter IN (Q1, Q2, Q3, Q4)
       )
"""

[[cases]]
description = "UNPIVOT operator"
input = """
SELECT * FROM Produce
UNPIVOT(
  (first_half_sales, second_half_sales)
  FOR semesters
  IN ((Q1, Q2) AS 'semester_1', (Q3, Q4) AS 'semester_2'))
"""
formatted = """
SELECT *
  FROM Produce
       UNPIVOT (
         (first_half_sales, second_half_sales)
         FOR semesters IN (
           (Q1, Q2) AS 'semester_1',
           (Q3, Q4) AS 'semester_2'
         )
       )
"""

[[cases]]
description = "TABLESAMPLE OPERATOR"
input = """
SELECT * FROM dataset.my_table TABLESAMPLE SYSTEM (10 PERCENT)
"""
formatted = """
SELECT *
  FROM dataset.my_table
       TABLESAMPLE SYSTEM (10 PERCENT)
"""

[[cases]]
description = "Join operation: INNER JOIN"
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster JOIN TeamMascot ON Roster.SchoolID = TeamMascot.SchoolID;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       JOIN
       TeamMascot
       ON Roster.SchoolID = TeamMascot.SchoolID
"""

[[cases]]
description = "Join operation: CROSS JOIN"
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster CROSS JOIN TeamMascot;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       CROSS JOIN
       TeamMascot
"""

[[cases]]
description = "Join operation: Comma cross join (,)"
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster, TeamMascot;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster,
       TeamMascot
"""

[[cases]]
description = "Join operation: FULL OUTER JOIN"
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster FULL outer JOIN TeamMascot ON Roster.SchoolID = TeamMascot.SchoolID;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       FULL OUTER JOIN
       TeamMascot
       ON Roster.SchoolID = TeamMascot.SchoolID
"""

[[cases]]
description = "Join operation: LEFT OUTER JOIN"
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster LEFT JOIN TeamMascot ON Roster.SchoolID = TeamMascot.SchoolID;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       LEFT JOIN
       TeamMascot
       ON Roster.SchoolID = TeamMascot.SchoolID
"""

[[cases]]
description = "Join operation: RIGHT OUTER JOIN"
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster RIGHT JOIN TeamMascot ON Roster.SchoolID = TeamMascot.SchoolID;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       RIGHT JOIN
       TeamMascot
       ON Roster.SchoolID = TeamMascot.SchoolID
"""

[[cases]]
description = "Join operation: ON and USING equivalency"
input = """
SELECT x FROM A JOIN B USING (x);
SELECT A.x FROM A JOIN B ON A.x = B.x;
"""
formatted = """
SELECT x
  FROM A

       JOIN
       B
       USING (x);

SELECT A.x
  FROM A

       JOIN
       B
       ON A.x = B.x;
"""

[[cases]]
description = "Join operation: correlated join"
input = """
SELECT *
FROM
  Roster
JOIN
  UNNEST(
    ARRAY(
      SELECT AS STRUCT *
      FROM PlayerStats
      WHERE PlayerStats.OpponentID = Roster.SchoolID
    )) AS PlayerMatches
  ON PlayerMatches.LastName = 'Buchanan'
"""
formatted = """
SELECT *
  FROM Roster

       JOIN
       UNNEST(ARRAY(
         SELECT AS STRUCT
                *
           FROM PlayerStats
          WHERE PlayerStats.OpponentID = Roster.SchoolID
       )) AS PlayerMatches
       ON PlayerMatches.LastName = 'Buchanan'
"""

[[cases]]
description = """
A common pattern for a correlated LEFT JOIN is to have an UNNEST
operation on the right side that references an array from some column
introduced by input on the left side.
"""
input = """
SELECT A.name, item, ARRAY_LENGTH(A.items) item_count_for_name
FROM
  UNNEST(
    [
      STRUCT(
        'first' AS name,
        [1, 2, 3, 4] AS items),
      STRUCT(
        'second' AS name,
        [] AS items)]) AS A
LEFT JOIN
  A.items AS item;

"""
formatted = """
SELECT A.name, item, ARRAY_LENGTH(A.items) AS item_count_for_name
  FROM UNNEST([
                STRUCT(
                  'first' AS name,
                  [1, 2, 3, 4] AS items
                ),
                STRUCT(
                  'second' AS name,
                  [] AS items
                )
              ]) AS A

       LEFT JOIN
       A.items AS item
"""

[[cases]]
description = "WHERE clause"
input = """
SELECT * FROM Roster
WHERE SchoolID = 52;
"""
formatted = """
SELECT *
  FROM Roster
 WHERE SchoolID = 52
"""

[[cases]]
description = "WHERE clause: The bool_expression can contain multiple sub-conditions:"
input = """
SELECT * FROM Roster
WHERE STARTS_WITH(LastName, "Mc") OR STARTS_WITH(LastName, "Mac")
"""
formatted = """
SELECT *
  FROM Roster
 WHERE STARTS_WITH(LastName, 'Mc')
    OR STARTS_WITH(LastName, 'Mac')
"""

[[cases]]
description = "WHERE clause: Expressions in an INNER JOIN have an equivalent expression in the WHERE clause."
input = """
SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster INNER JOIN TeamMascot
ON Roster.SchoolID = TeamMascot.SchoolID;

SELECT Roster.LastName, TeamMascot.Mascot
FROM Roster CROSS JOIN TeamMascot
WHERE Roster.SchoolID = TeamMascot.SchoolID;
"""
formatted = """
SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       INNER JOIN
       TeamMascot
       ON Roster.SchoolID = TeamMascot.SchoolID;

SELECT Roster.LastName, TeamMascot.Mascot
  FROM Roster

       CROSS JOIN
       TeamMascot

 WHERE Roster.SchoolID = TeamMascot.SchoolID;
"""

[[cases]]
description = "GROUP BY value list"
input = """
WITH PlayerStats AS (
  SELECT 'Adams' as LastName, 'Noam' as FirstName, 3 as PointsScored UNION ALL
  SELECT 'Buchanan', 'Jie', 0 UNION ALL
  SELECT 'Coolidge', 'Kiran', 1 UNION ALL
  SELECT 'Adams', 'Noam', 4 UNION ALL
  SELECT 'Buchanan', 'Jie', 13)
SELECT SUM(PointsScored) AS total_points, LastName
FROM PlayerStats
GROUP BY LastName;
"""
formatted = """
WITH
  PlayerStats AS (
    SELECT 'Adams' AS LastName,
           'Noam'  AS FirstName,
           3       AS PointsScored
     UNION ALL
    SELECT 'Buchanan', 'Jie', 0
     UNION ALL
    SELECT 'Coolidge', 'Kiran', 1
     UNION ALL
    SELECT 'Adams', 'Noam', 4
     UNION ALL
    SELECT 'Buchanan', 'Jie', 13
  )
SELECT SUM(PointsScored) AS total_points, LastName
  FROM PlayerStats
 GROUP BY LastName
"""

[[cases]]
description = "GROUP BY value list"
input = """
WITH PlayerStats AS (
  SELECT 'Adams' as LastName, 'Noam' as FirstName, 3 as PointsScored UNION ALL
  SELECT 'Buchanan', 'Jie', 0 UNION ALL
  SELECT 'Coolidge', 'Kiran', 1 UNION ALL
  SELECT 'Adams', 'Noam', 4 UNION ALL
  SELECT 'Buchanan', 'Jie', 13)
SELECT SUM(PointsScored) AS total_points, LastName, FirstName
FROM PlayerStats
GROUP BY 2, 3;
"""
formatted = """
WITH
  PlayerStats AS (
    SELECT 'Adams' AS LastName,
           'Noam'  AS FirstName,
           3       AS PointsScored
     UNION ALL
    SELECT 'Buchanan', 'Jie', 0
     UNION ALL
    SELECT 'Coolidge', 'Kiran', 1
     UNION ALL
    SELECT 'Adams', 'Noam', 4
     UNION ALL
    SELECT 'Buchanan', 'Jie', 13
  )
SELECT SUM(PointsScored) AS total_points, LastName, FirstName
  FROM PlayerStats
 GROUP BY 2, 3
"""

[[cases]]
description = "GROUP BY rollup list"
input = """
WITH Numbers AS (
  SELECT 1 AS a, 2 AS b, 3 AS c UNION ALL
  SELECT 4, 5, 6 UNION ALL
  SELECT 1, 2, 8)
SELECT a, b, SUM(c) AS sum_c FROM Numbers GROUP BY ROLLUP(a, b)
ORDER BY a, b;
"""
formatted = """
WITH
  Numbers AS (
    SELECT 1 AS a,
           2 AS b,
           3 AS c
     UNION ALL
    SELECT 4, 5, 6
     UNION ALL
    SELECT 1, 2, 8
  )
SELECT a, b, SUM(c) AS sum_c
  FROM Numbers
 GROUP BY ROLLUP(a, b)
 ORDER BY a, b
"""

[[cases]]
description = "GROUP BY rollup list"
input = """
WITH Sales AS (
  SELECT 123 AS sku, 1 AS day, 9.99 AS price UNION ALL
  SELECT 123, 1, 8.99 UNION ALL
  SELECT 456, 1, 4.56 UNION ALL
  SELECT 123, 2, 9.99 UNION ALL
  SELECT 789, 3, 1.00 UNION ALL
  SELECT 456, 3, 4.25 UNION ALL
  SELECT 789, 3, 0.99
)
SELECT
  day,
  SUM(price) AS total
FROM Sales
GROUP BY ROLLUP(day)
ORDER BY day;
"""
formatted = """
WITH
  Sales AS (
    SELECT 123  AS sku,
           1    AS day,
           9.99 AS price
     UNION ALL
    SELECT 123, 1, 8.99
     UNION ALL
    SELECT 456, 1, 4.56
     UNION ALL
    SELECT 123, 2, 9.99
     UNION ALL
    SELECT 789, 3, 1.00
     UNION ALL
    SELECT 456, 3, 4.25
     UNION ALL
    SELECT 789, 3, 0.99
  )
SELECT day, SUM(price) AS total
  FROM Sales
 GROUP BY ROLLUP(day)
 ORDER BY day
"""

[[cases]]
description = ""
input = """
WITH Sales AS (
  SELECT 123 AS sku, 1 AS day, 9.99 AS price UNION ALL
  SELECT 123, 1, 8.99 UNION ALL
  SELECT 456, 1, 4.56 UNION ALL
  SELECT 123, 2, 9.99 UNION ALL
  SELECT 789, 3, 1.00 UNION ALL
  SELECT 456, 3, 4.25 UNION ALL
  SELECT 789, 3, 0.99
)
SELECT
  sku,
  day,
  SUM(price) AS total
FROM Sales
GROUP BY ROLLUP(sku, day)
ORDER BY sku, day;
"""
formatted = """
WITH
  Sales AS (
    SELECT 123  AS sku,
           1    AS day,
           9.99 AS price
     UNION ALL
    SELECT 123, 1, 8.99
     UNION ALL
    SELECT 456, 1, 4.56
     UNION ALL
    SELECT 123, 2, 9.99
     UNION ALL
    SELECT 789, 3, 1.00
     UNION ALL
    SELECT 456, 3, 4.25
     UNION ALL
    SELECT 789, 3, 0.99
  )
SELECT sku, day, SUM(price) AS total
  FROM Sales
 GROUP BY ROLLUP(sku, day)
 ORDER BY sku, day
"""

[[cases]]
description = "HAVING clause"
input = """
SELECT LastName
FROM Roster
GROUP BY LastName
HAVING SUM(PointsScored) > 15;
"""
formatted = """
SELECT LastName
  FROM Roster
 GROUP BY LastName
HAVING SUM(PointsScored) > 15
"""

[[cases]]
description = "HAVING clause"
input = """
SELECT LastName, SUM(PointsScored) AS ps
FROM Roster
GROUP BY LastName
HAVING ps > 0;
"""
formatted = """
SELECT LastName, SUM(PointsScored) AS ps
  FROM Roster
 GROUP BY LastName
HAVING ps > 0
"""

[[cases]]
description = "Aggregation in both the SELECT list and HAVING clause"
input = """
SELECT LastName, COUNT(*)
FROM PlayerStats
GROUP BY LastName
HAVING SUM(PointsScored) > 15;
"""
formatted = """
SELECT LastName, COUNT(*)
  FROM PlayerStats
 GROUP BY LastName
HAVING SUM(PointsScored) > 15
"""

[[cases]]
description = "ORDER BY clause"
input = """
SELECT x, y
FROM (SELECT 1 AS x, true AS y UNION ALL
      SELECT 9, true UNION ALL
      SELECT NULL, false)
ORDER BY x;

SELECT x, y
FROM (SELECT 1 AS x, true AS y UNION ALL
      SELECT 9, true UNION ALL
      SELECT NULL, false)
ORDER BY x NULLS LAST;

SELECT x, y
FROM (SELECT 1 AS x, true AS y UNION ALL
      SELECT 9, true UNION ALL
      SELECT NULL, false)
ORDER BY x DESC NULLS FIRST;

SELECT LastName, PointsScored, OpponentID
FROM PlayerStats
ORDER BY SchoolID, LastName;

SELECT * FROM Roster
UNION ALL
SELECT * FROM TeamMascot
ORDER BY SchoolID;

( SELECT * FROM Roster
  UNION ALL
  SELECT * FROM TeamMascot )
ORDER BY SchoolID;

SELECT * FROM Roster
UNION ALL
( SELECT * FROM TeamMascot
  ORDER BY SchoolID );

SELECT SUM(PointsScored), LastName
FROM PlayerStats
GROUP BY LastName
ORDER BY LastName;

SELECT SUM(PointsScored), LastName
FROM PlayerStats
GROUP BY 2
ORDER BY 2;
"""
formatted = """
SELECT x, y
  FROM (
         SELECT 1    AS x,
                TRUE AS y
          UNION ALL
         SELECT 9, TRUE
          UNION ALL
         SELECT NULL, FALSE
       )
 ORDER BY x;

SELECT x, y
  FROM (
         SELECT 1    AS x,
                TRUE AS y
          UNION ALL
         SELECT 9, TRUE
          UNION ALL
         SELECT NULL, FALSE
       )
 ORDER BY x NULLS LAST;

SELECT x, y
  FROM (
         SELECT 1    AS x,
                TRUE AS y
          UNION ALL
         SELECT 9, TRUE
          UNION ALL
         SELECT NULL, FALSE
       )
 ORDER BY x DESC NULLS FIRST;

SELECT LastName, PointsScored, OpponentID
  FROM PlayerStats
 ORDER BY SchoolID, LastName;

SELECT *
  FROM Roster
 UNION ALL
SELECT *
  FROM TeamMascot
 ORDER BY SchoolID;

(
  SELECT *
    FROM Roster
   UNION ALL
  SELECT *
    FROM TeamMascot
)
ORDER BY SchoolID;

SELECT *
  FROM Roster
 UNION ALL
(
  SELECT *
    FROM TeamMascot
   ORDER BY SchoolID
);

SELECT SUM(PointsScored), LastName
  FROM PlayerStats
 GROUP BY LastName
 ORDER BY LastName;

SELECT SUM(PointsScored), LastName
  FROM PlayerStats
 GROUP BY 2
 ORDER BY 2;
"""

[[cases]]
description = "QUALIFY clause"
input = """
SELECT
  item,
  RANK() OVER (PARTITION BY category ORDER BY purchases DESC) as rank
FROM Produce
WHERE Produce.category = 'vegetable'
QUALIFY rank <= 3;

SELECT item
FROM Produce
WHERE Produce.category = 'vegetable'
QUALIFY RANK() OVER (PARTITION BY category ORDER BY purchases DESC) <= 3;
"""
formatted = """
 SELECT item,
        RANK() OVER (
          PARTITION BY category
              ORDER BY purchases DESC
        ) AS rank
   FROM Produce
  WHERE Produce.category = 'vegetable'
QUALIFY rank <= 3 ;

 SELECT item
   FROM Produce
  WHERE Produce.category = 'vegetable'
QUALIFY RANK() OVER (
          PARTITION BY category
              ORDER BY purchases DESC
        ) <= 3 ;
"""

[[cases]]
description = "WINDOW clause"
input = """
SELECT item, purchases, category, LAST_VALUE(item)
  OVER (item_window) AS most_popular
FROM Produce
WINDOW item_window AS (
  PARTITION BY category
  ORDER BY purchases
  ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)
;
SELECT item, purchases, category, LAST_VALUE(item)
  OVER (d) AS most_popular
FROM Produce
WINDOW
  a AS (PARTITION BY category),
  b AS (a ORDER BY purchases),
  c AS (b ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING),
  d AS (c)
;
SELECT item, purchases, category, LAST_VALUE(item)
  OVER (c ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS most_popular
FROM Produce
WINDOW
  a AS (PARTITION BY category),
  b AS (a ORDER BY purchases),
  c AS b
"""
formatted = """
SELECT item,
       purchases,
       category,
       LAST_VALUE(item) OVER item_window AS most_popular
  FROM Produce
WINDOW item_window AS (
         PARTITION BY category
             ORDER BY purchases
              ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING
       );

SELECT item,
       purchases,
       category,
       LAST_VALUE(item) OVER d AS most_popular
  FROM Produce
WINDOW a AS (
         PARTITION BY category
       ),
       b AS (
         a
         ORDER BY purchases
       ),
       c AS (
         b
         ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING
       ),
       d AS (
         c
       );

SELECT item,
       purchases,
       category,
       LAST_VALUE(item) OVER (
         c
         ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING
       ) AS most_popular
  FROM Produce
WINDOW a AS (
         PARTITION BY category
       ),
       b AS (
         a
         ORDER BY purchases
       ),
       c AS (
         b
       );
"""

[[cases]]
description = "EXCEPT"
input = """
SELECT * FROM UNNEST(ARRAY<int64>[1, 2, 3]) AS number
EXCEPT DISTINCT SELECT 1;
"""
formatted = """
SELECT *
  FROM UNNEST(ARRAY<INT64>[1, 2, 3]) AS number
EXCEPT DISTINCT
SELECT 1
"""

[[cases]]
description = "LIMIT and OFFSET clauses"
input = """
SELECT *
FROM UNNEST(ARRAY<STRING>['a', 'b', 'c', 'd', 'e']) AS letter
ORDER BY letter ASC LIMIT 2
;
SELECT *
FROM UNNEST(ARRAY<STRING>['a', 'b', 'c', 'd', 'e']) AS letter
ORDER BY letter ASC LIMIT 3 OFFSET 1
"""
formatted = """
SELECT *
  FROM UNNEST(ARRAY<STRING>['a', 'b', 'c', 'd', 'e']) AS letter
 ORDER BY letter ASC
 LIMIT 2;

SELECT *
  FROM UNNEST(ARRAY<STRING>['a', 'b', 'c', 'd', 'e']) AS letter
 ORDER BY letter ASC
 LIMIT 3 OFFSET 1;
"""

[[cases]]
description = "WITH clause: non-recursive CTEs"
input = """
WITH subQ1 AS (SELECT SchoolID FROM Roster),
     subQ2 AS (SELECT OpponentID FROM PlayerStats)
SELECT * FROM subQ1
UNION ALL
SELECT * FROM subQ2
"""
formatted = """
WITH
  subQ1 AS (
    SELECT SchoolID
      FROM Roster
  ),
  subQ2 AS (
    SELECT OpponentID
      FROM PlayerStats
  )
SELECT *
  FROM subQ1
 UNION ALL
SELECT *
  FROM subQ2
"""

[[cases]]
description = "WITH clause: non-recursive CTEs"
input = """
WITH q1 AS (select 1)
SELECT *
FROM
  (WITH q2 AS (SELECT * FROM q1) SELECT * FROM q2);

WITH q1 AS (select 1)
SELECT *
FROM
  (WITH q2 AS (SELECT * FROM q1),  # q1 resolves to my_query
        q3 AS (SELECT * FROM q1),  # q1 resolves to my_query
        q1 AS (SELECT * FROM q1),  # q1 (in the query) resolves to my_query
        q4 AS (SELECT * FROM q1)   # q1 resolves to the WITH subquery on the previous line.
    SELECT * FROM q1)              # q1 resolves to the third inner WITH subquery.
;
"""
formatted = """
WITH
  q1 AS (
    SELECT 1
  )
SELECT *
  FROM (
         WITH
           q2 AS (
             SELECT *
               FROM q1
           )
         SELECT *
           FROM q2
       );

WITH
  q1 AS (
    SELECT 1
  )
SELECT *
  FROM (
         WITH
           q2 AS (
             SELECT *
               FROM q1
           ),
           # q1 resolves to my_query
           q3 AS (
             SELECT *
               FROM q1
           ),
           # q1 resolves to my_query
           q1 AS (
             SELECT *
               FROM q1
           ),
           # q1 (in the query) resolves to my_query
           q4 AS (
             SELECT *
               FROM q1
           )
         # q1 resolves to the WITH subquery on the previous line.
         SELECT *
           FROM q1
       );
# q1 resolves to the third inner WITH subquery.
"""

[[cases]]
description = "WITH clause: recursive CTEs"
input = """
WITH RECURSIVE
  T1 AS ( (SELECT 1 AS n) UNION ALL (SELECT n + 1 AS n FROM T1 WHERE n < 3) )
SELECT n FROM T1
"""
formatted = """
WITH RECURSIVE
  T1 AS (
    (
      SELECT 1 AS n
    )
    UNION ALL
    (
      SELECT n + 1 AS n
        FROM T1
       WHERE n < 3
    )
  )
SELECT n
  FROM T1
"""

[[cases]]
description = "WITH clause: recursive CTEs"
input = """
WITH RECURSIVE
  T0 AS (SELECT 1 AS n),
  T1 AS ((SELECT * FROM T0) UNION ALL (SELECT n + 1 FROM T1 WHERE n < 4)),
  T2 AS ((SELECT 1 AS n) UNION ALL (SELECT n + 1 FROM T2 WHERE n < 4)),
  T3 AS (SELECT * FROM T1 INNER JOIN T2 USING (n))
SELECT * FROM T3 ORDER BY n
"""
formatted = """
WITH RECURSIVE
  T0 AS (
    SELECT 1 AS n
  ),
  T1 AS (
    (
      SELECT *
        FROM T0
    )
    UNION ALL
    (
      SELECT n + 1
        FROM T1
       WHERE n < 4
    )
  ),
  T2 AS (
    (
      SELECT 1 AS n
    )
    UNION ALL
    (
      SELECT n + 1
        FROM T2
       WHERE n < 4
    )
  ),
  T3 AS (
    SELECT *
      FROM T1

           INNER JOIN
           T2
           USING (n)
  )
SELECT *
  FROM T3
 ORDER BY n
"""

[[cases]]
description = "WITH clause: recursive CTEs"
input = """
WITH RECURSIVE
  T0 AS (SELECT * FROM UNNEST ([60, 20, 30])),
  T1 AS ((SELECT 1 AS n) UNION ALL (SELECT n + (SELECT COUNT(*) FROM T0) FROM T1 WHERE n < 4))
SELECT * FROM T1 ORDER BY n
"""
formatted = """
WITH RECURSIVE
  T0 AS (
    SELECT *
      FROM UNNEST([60, 20, 30])
  ),
  T1 AS (
    (
      SELECT 1 AS n
    )
    UNION ALL
    (
      SELECT n + (
               SELECT COUNT(*)
                 FROM T0
             )
        FROM T1
       WHERE n < 4
    )
  )
SELECT *
  FROM T1
 ORDER BY n
"""

[[cases]]
description = "WITH clause: recursive CTEs"
input = """
WITH RECURSIVE
  T0 AS (SELECT 1 AS n),
  T1 AS ((SELECT 1 AS n) UNION ALL (SELECT n + 1 FROM T1 INNER JOIN T0 USING (n)))
SELECT * FROM T1 ORDER BY n
"""
formatted = """
WITH RECURSIVE
  T0 AS (
    SELECT 1 AS n
  ),
  T1 AS (
    (
      SELECT 1 AS n
    )
    UNION ALL
    (
      SELECT n + 1
        FROM T1

             INNER JOIN
             T0
             USING (n)
    )
  )
SELECT *
  FROM T1
 ORDER BY n
"""

[[cases]]
description = "WITH clause: recursive CTEs"
input = """
WITH RECURSIVE
  T0 AS (SELECT 2 AS p),
  T1 AS ((SELECT 1 AS n) UNION ALL (SELECT T1.n + T0.p FROM T1 CROSS JOIN T0 WHERE T1.n < 4))
SELECT * FROM T1 CROSS JOIN T0 ORDER BY n
"""
formatted = """
WITH RECURSIVE
  T0 AS (
    SELECT 2 AS p
  ),
  T1 AS (
    (
      SELECT 1 AS n
    )
    UNION ALL
    (
      SELECT T1.n + T0.p
        FROM T1

             CROSS JOIN
             T0

       WHERE T1.n < 4
    )
  )
SELECT *
  FROM T1

       CROSS JOIN
       T0
 ORDER BY n
"""

[[cases]]
description = "Recursive CTEs can be used inside CREATE TABLE AS SELECT statements"
input = """
CREATE OR REPLACE TABLE `myproject.mydataset.new_table` AS
  WITH RECURSIVE
    T1 AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM T1 WHERE n < 3)
  SELECT * FROM T1
"""
formatted = """
CREATE OR REPLACE TABLE `myproject.mydataset.new_table`
AS
WITH RECURSIVE
  T1 AS (
    SELECT 1 AS n
     UNION ALL
    SELECT n + 1
      FROM T1
     WHERE n < 3
  )
SELECT *
  FROM T1
"""

[[cases]]
description = "Explicit aliases"
input = """
SELECT s.FirstName, s2.SongName
FROM Singers AS s, (SELECT * FROM Songs) AS s2;
"""
formatted = """
SELECT s.FirstName, s2.SongName
  FROM Singers AS s,
       (
         SELECT *
           FROM Songs
       ) AS s2
"""

[[cases]]
description = "Explicit aliases"
input = """
SELECT s.FirstName AS name, LOWER(s.FirstName) AS lname
FROM Singers s;
"""
formatted = """
SELECT s.FirstName        AS name,
       LOWER(s.FirstName) AS lname
  FROM Singers AS s
"""

[[cases]]
description = "Alias visibility"
input = """
SELECT FirstName, s.ReleaseDate
FROM Singers s WHERE ReleaseDate = 1975;
"""
formatted = """
SELECT FirstName, s.ReleaseDate
  FROM Singers AS s
 WHERE ReleaseDate = 1975
"""

[[cases]]
description = "Alias visibility"
input = """
SELECT LastName AS last, SingerID
FROM Singers
ORDER BY last;
"""
formatted = """
SELECT LastName AS last, SingerID
  FROM Singers
 ORDER BY last
"""

[[cases]]
description = "Duplicate aliases"
input = """
SELECT 1 AS a, 2 AS a;
"""
formatted = """
SELECT 1 AS a,
       2 AS a
"""

[[cases]]
description = "Amibguous aliases"
input = """
SELECT FirstName AS name, LastName AS name,
FROM Singers
GROUP BY name;
"""
formatted = """
SELECT FirstName AS name,
       LastName  AS name
  FROM Singers
 GROUP BY name
"""

[[cases]]
description = """
The following example selects all columns from range variable Coordinate,
which in effect selects all columns from table Grid.
"""
input = """
WITH Grid AS (SELECT 1 x, 2 y)
SELECT Coordinate.* FROM Grid AS Coordinate;
"""
formatted = """
WITH
  Grid AS (
    SELECT 1 AS x,
           2 AS y
  )
SELECT Coordinate.*
  FROM Grid AS Coordinate
"""

[[cases]]
description = "Value tables"
input = """
SELECT * FROM (SELECT AS VALUE STRUCT(123 AS a, FALSE AS b))
"""
formatted = """
SELECT *
  FROM (
         SELECT AS VALUE
                STRUCT(123 AS a, FALSE AS b)
       )
"""

[[cases]]
description = "GROUP BY clause"
input = """
SELECT LastName, SUM(PointsScored)
FROM PlayerStats
GROUP BY LastName;
"""
formatted = """
SELECT LastName, SUM(PointsScored)
  FROM PlayerStats
 GROUP BY LastName
"""

[[cases]]
description = ""
input = """
SELECT Mascot AS X, SchoolID AS Y
FROM TeamMascot
UNION ALL
SELECT LastName, PointsScored
FROM PlayerStats;
"""
formatted = """
SELECT Mascot   AS X,
       SchoolID AS Y
  FROM TeamMascot
 UNION ALL
SELECT LastName, PointsScored
  FROM PlayerStats
"""

[[cases]]
description = "INTERSECT"
input = """
SELECT LastName
FROM Roster
INTERSECT DISTINCT
SELECT LastName
FROM PlayerStats;
"""
formatted = """
   SELECT LastName
     FROM Roster
INTERSECT DISTINCT
   SELECT LastName
     FROM PlayerStats
"""

[[cases]]
description = "EXCEPT"
input = """
SELECT LastName
FROM Roster
EXCEPT DISTINCT
SELECT LastName
FROM PlayerStats;
"""
formatted = """
SELECT LastName
  FROM Roster
EXCEPT DISTINCT
SELECT LastName
  FROM PlayerStats
"""
