# Tests cases of examples from BigQuery's documentation.
[setup]

[setup.print_options]
soft_max_cols = 80
newline_before_clause = true
align_logical_with_clauses = true
align_trailing_comments = true
column_list_trailing_comma = "NEVER"
indentation = 1
indent_with_clause = true
min_joins_to_separate_in_blocks = 1
max_cols_for_single_line_select = 4
function_name_style = "UPPER_CASE"
identifier_style = "AS_IS"
keyword_style = "UPPER_CASE"
type_style = "UPPER_CASE"
bool_style = "UPPER_CASE"
null_style = "UPPER_CASE"
bytes_style = "PREFER_SINGLE_QUOTE"
string_style = "PREFER_SINGLE_QUOTE"

[[cases]]
description = "CREATE SCHEMA statement"
input = """
-- Creating a new dataset.
CREATE SCHEMA mydataset
OPTIONS(
  location="us",
  default_table_expiration_days=3.75,
  labels=[("label1","value1"),("label2","value2")]
  );

-- Create a case-insensitive dataset.
CREATE SCHEMA mydataset
OPTIONS(
  is_case_insensitive=TRUE
);

-- Create a dataset with collation support.
CREATE SCHEMA mydataset
DEFAULT COLLATE 'und:ci';
"""
formatted = """
-- Creating a new dataset.
CREATE SCHEMA mydataset
OPTIONS (
  location                      = 'us',
  default_table_expiration_days = 3.75,
  labels                        = [
                                    ('label1', 'value1'),
                                    ('label2', 'value2')
                                  ]
);

-- Create a case-insensitive dataset.
CREATE SCHEMA mydataset
OPTIONS (is_case_insensitive=TRUE);

-- Create a dataset with collation support.
CREATE SCHEMA mydataset
DEFAULT COLLATE 'und:ci';
"""

[[cases]]
description = "CREATE TABLE statement: creating a new table"
input = """
CREATE TABLE mydataset.newtable
(
  x INT64 OPTIONS(description="An optional INTEGER field"),
  y STRUCT<
    a ARRAY<STRING> OPTIONS(description="A repeated STRING field"),
    b BOOL
  >
)
PARTITION BY _PARTITIONDATE
OPTIONS(
  expiration_timestamp=TIMESTAMP "2025-01-01 00:00:00 UTC",
  partition_expiration_days=1,
  description="a table that expires in 2025, with each partition living for 24 hours",
  labels=[("org_unit", "development")]
);
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  x INT64 OPTIONS (description='An optional INTEGER field'),
  y STRUCT<
      a ARRAY<
          STRING
        > OPTIONS (description='A repeated STRING field'),
      b BOOL
    >
)
PARTITION BY _PARTITIONDATE
OPTIONS (
  expiration_timestamp      = TIMESTAMP '2025-01-01 00:00:00 UTC',
  partition_expiration_days = 1,
  description               = 'a table that expires in 2025, with each partition living for 24 hours',
  labels                    = [
                                ('org_unit', 'development')
                              ]
)
"""

[[cases]]
description = "CREATE TABLE statement: create a new table from an existing table"
input = """
CREATE TABLE mydataset.top_words
OPTIONS(
  description="Top ten words per Shakespeare corpus"
) AS
SELECT
  corpus,
  ARRAY_AGG(STRUCT(word, word_count) ORDER BY word_count DESC LIMIT 10) AS top_words
FROM bigquery-public-data.samples.shakespeare
GROUP BY corpus;
"""
formatted = """
CREATE TABLE mydataset.top_words
OPTIONS (description='Top ten words per Shakespeare corpus')
AS
SELECT corpus,
       ARRAY_AGG(
         STRUCT(word, word_count)
         ORDER BY word_count DESC
         LIMIT 10
       ) AS top_words
  FROM bigquery-public-data.samples.shakespeare
 GROUP BY corpus
"""

[[cases]]
description = "CREATE TABLE statement: create a table only if the table doesn't exist"
input = """
CREATE TABLE IF NOT EXISTS mydataset.newtable (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
OPTIONS(
  expiration_timestamp=TIMESTAMP "2025-01-01 00:00:00 UTC",
  description="a table that expires in 2025",
  labels=[("org_unit", "development")]
)
"""
formatted = """
CREATE TABLE IF NOT EXISTS mydataset.newtable
(
  x INT64,
  y STRUCT<
      a ARRAY<STRING>,
      b BOOL
    >
)
OPTIONS (
  expiration_timestamp = TIMESTAMP '2025-01-01 00:00:00 UTC',
  description          = 'a table that expires in 2025',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
"""

[[cases]]
description = "CREATE TABLE statement: create or replace a table"
input = """
CREATE OR REPLACE TABLE mydataset.newtable (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
OPTIONS(
  expiration_timestamp=TIMESTAMP "2025-01-01 00:00:00 UTC",
  description="a table that expires in 2025",
  labels=[("org_unit", "development")]
)
"""
formatted = """
CREATE OR REPLACE TABLE mydataset.newtable
(
  x INT64,
  y STRUCT<
      a ARRAY<STRING>,
      b BOOL
    >
)
OPTIONS (
  expiration_timestamp = TIMESTAMP '2025-01-01 00:00:00 UTC',
  description          = 'a table that expires in 2025',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
"""

[[cases]]
description = "CREATE TABLE statement: create a table with REQUIRED column"
input = """
CREATE TABLE mydataset.newtable (
  x INT64 NOT NULL,
  y STRUCT<
    a ARRAY<STRING>,
    b BOOL NOT NULL,
    c FLOAT64
  > NOT NULL,
  z STRING
)
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  x INT64 NOT NULL,
  y STRUCT<
      a ARRAY<STRING>,
      b BOOL NOT NULL,
      c FLOAT64
    > NOT NULL,
  z STRING
)
"""

[[cases]]
description = "CREATE TABLE statement: create a table with collation support"
input = """
CREATE TABLE mydataset.newtable (
  a STRING,
  b STRING,
  c STRUCT<
    x FLOAT64,
    y ARRAY<STRING>
  >
)
DEFAULT COLLATE 'und:ci';

CREATE TABLE mydataset.newtable (
  a STRING,
  b STRING COLLATE 'und:ci',
  c STRUCT<
    x FLOAT64,
    y ARRAY<STRING COLLATE 'und:ci'>
  >
);
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  a STRING,
  b STRING,
  c STRUCT<
      x FLOAT64,
      y ARRAY<STRING>
    >
)
DEFAULT COLLATE 'und:ci';

CREATE TABLE mydataset.newtable
(
  a STRING,
  b STRING COLLATE 'und:ci',
  c STRUCT<
      x FLOAT64,
      y ARRAY<STRING COLLATE 'und:ci'>
    >
);
"""

[[cases]]
description = "CREATE TABLE statement: a table with parameterized data types"
input = """
CREATE TABLE mydataset.newtable (
  x STRING(10),
  y STRUCT<
    a ARRAY<BYTES(5)>,
    b NUMERIC(15, 2) OPTIONS(rounding_mode = 'ROUND_HALF_EVEN'),
    c FLOAT64
  >,
  z BIGNUMERIC(35)
)
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  x STRING(10),
  y STRUCT<
      a ARRAY<BYTES(5)>,
      b NUMERIC(15, 2) OPTIONS (rounding_mode='ROUND_HALF_EVEN'),
      c FLOAT64
    >,
  z BIGNUMERIC(35)
)
"""

[[cases]]
description = "CREATE TABLE statement: create a partitioned table"
input = """
CREATE TABLE mydataset.newtable (transaction_id INT64, transaction_date DATE)
PARTITION BY transaction_date
OPTIONS(
  partition_expiration_days=3,
  description="a table partitioned by transaction_date"
)
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  transaction_id   INT64,
  transaction_date DATE
)
PARTITION BY transaction_date
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table partitioned by transaction_date'
)
"""

[[cases]]
description = "CREATE TABLE statement: a partitioned table from the result of a query"
input = """
CREATE TABLE mydataset.days_with_rain
PARTITION BY date
OPTIONS (
  partition_expiration_days=365,
  description="weather stations with precipitation, partitioned by day"
) AS
SELECT
  DATE(CAST(year AS INT64), CAST(mo AS INT64), CAST(da AS INT64)) AS date,
  (SELECT ANY_VALUE(name) FROM `bigquery-public-data.noaa_gsod.stations` AS stations
   WHERE stations.usaf = stn) AS station_name,  -- Stations can have multiple names
  prcp
FROM `bigquery-public-data.noaa_gsod.gsod2017` AS weather
WHERE prcp != 99.9  -- Filter unknown values
  AND prcp > 0      -- Filter stations/days with no precipitation
"""
formatted = """
CREATE TABLE mydataset.days_with_rain
PARTITION BY date
OPTIONS (
  partition_expiration_days = 365,
  description               = 'weather stations with precipitation, partitioned by day'
)
AS
SELECT DATE(
         CAST(year AS INT64),
         CAST(mo AS INT64),
         CAST(da AS INT64)
       ) AS date,
       (
         SELECT ANY_VALUE(name)
           FROM `bigquery-public-data.noaa_gsod.stations` AS stations
          WHERE stations.usaf = stn
       ) AS station_name,  -- Stations can have multiple names
       prcp
  FROM `bigquery-public-data.noaa_gsod.gsod2017` AS weather
 WHERE prcp != 99.9  -- Filter unknown values
   AND prcp >  0     -- Filter stations/days with no precipitation
"""

[[cases]]
description = "CREATE TABLE statement: create a clustered table"
input = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp TIMESTAMP,
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
);
CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY
  customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
);
CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
CLUSTER BY
  customer_id
OPTIONS (
  description="a table clustered by customer_id"
);
"""
formatted = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp          TIMESTAMP,
  customer_id        STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
  CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table clustered by customer_id'
);

CREATE TABLE mydataset.myclusteredtable
(
  customer_id        STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(_PARTITIONTIME)
  CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table clustered by customer_id'
);

CREATE TABLE mydataset.myclusteredtable
(
  customer_id        STRING,
  transaction_amount NUMERIC
)
CLUSTER BY customer_id
OPTIONS (description='a table clustered by customer_id');
"""

[[cases]]
description = "CREATE TABLE statemtent: a clustered table from the result of a query"
input = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp TIMESTAMP,
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
CLUSTER BY
  customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
)
AS SELECT * FROM mydataset.myothertable;

CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
CLUSTER BY
  customer_id
OPTIONS (
  description="a table clustered by customer_id"
)
AS SELECT * FROM mydataset.myothertable
"""
formatted = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp          TIMESTAMP,
  customer_id        STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
  CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table clustered by customer_id'
)
AS
SELECT *
  FROM mydataset.myothertable;

CREATE TABLE mydataset.myclusteredtable
(
  customer_id        STRING,
  transaction_amount NUMERIC
)
CLUSTER BY customer_id
OPTIONS (description='a table clustered by customer_id')
AS
SELECT *
  FROM mydataset.myothertable;
"""

[[cases]]
description = "CREATE TABLE statement: create a temporary table"
input = """
CREATE TEMP TABLE Example
(
  x INT64,
  y STRING
);

INSERT INTO Example
VALUES (5, 'foo');

INSERT INTO Example
VALUES (6, 'bar');

SELECT *
FROM Example;
"""
formatted = """
CREATE TEMPORARY TABLE Example
(
  x INT64,
  y STRING
);

INSERT Example
VALUES
  (5, 'foo');

INSERT Example
VALUES
  (6, 'bar');

SELECT *
  FROM Example;
"""

[[cases]]
description = "CREATE TABLE statement: load data across clouds"
input = """
-- First, display information about the myawsdataset.orders table:
SELECT
  table_name, ddl
FROM
  `myproject`.myawsdataset.INFORMATION_SCHEMA.TABLES
WHERE
  table_name = 'orders';

-- Next, display information about the myotherdataset.shipments table:
SELECT
  table_name, ddl
FROM
  `myproject`.myotherdataset.INFORMATION_SCHEMA.TABLES
WHERE
  table_name = 'shipments';

-- Now, using the CREATE TABLE AS SELECT statement you can selectively
-- load data to the myotherdataset.ordersof92 table in the US multi-region:
CREATE OR REPLACE TABLE
  myotherdataset.ordersof92 AS
SELECT
  *
FROM
  myawsdataset.orders
WHERE
  l_commitdate >= '1992-01-01'
AND
   l_commitdate <= '1992-12-31';

-- You can then perform a join operation with the newly created tables using wildcards:
SELECT
  orders.l_orderkey,
  orders.l_orderkey,
  orders.l_suppkey,
  orders.l_commitdate,
  orders.l_returnflag,
  shipments.l_shipmode,
  shipments.l_shipinstruct
FROM
  myotherdataset.shipments
JOIN
  `myotherdataset.ordersof*` as orders
ON
  orders.l_orderkey = shipments.l_orderkey
AND orders.l_partkey = shipments.l_partkey
AND orders.l_suppkey = shipments.l_suppkey
WHERE orders.l_returnflag = 'R'; -- 'R' means refunded.

-- When new data is available, append the data of the 1993 year to the
-- destination table using the INSERT INTO SELECT statement:
INSERT INTO
   myotherdataset.ordersof93
 SELECT
   *
 FROM
   myawsdataset.orders
 WHERE
   l_commitdate >= '1993-01-01'
   AND l_commitdate <= '1993-12-31';
"""
formatted = """
-- First, display information about the myawsdataset.orders table:
SELECT table_name, ddl
  FROM `myproject`.myawsdataset.INFORMATION_SCHEMA.TABLES
 WHERE table_name = 'orders';

-- Next, display information about the myotherdataset.shipments table:
SELECT table_name, ddl
  FROM `myproject`.myotherdataset.INFORMATION_SCHEMA.TABLES
 WHERE table_name = 'shipments';

-- Now, using the CREATE TABLE AS SELECT statement you can selectively
-- load data to the myotherdataset.ordersof92 table in the US multi-region:
CREATE OR REPLACE TABLE myotherdataset.ordersof92
AS
SELECT *
  FROM myawsdataset.orders
 WHERE l_commitdate >= '1992-01-01'
   AND l_commitdate <= '1992-12-31';

-- You can then perform a join operation with the newly created tables using wildcards:
SELECT orders.l_orderkey,
       orders.l_orderkey,
       orders.l_suppkey,
       orders.l_commitdate,
       orders.l_returnflag,
       shipments.l_shipmode,
       shipments.l_shipinstruct
  FROM myotherdataset.shipments

       JOIN
       `myotherdataset.ordersof*` AS orders
       ON  orders.l_orderkey = shipments.l_orderkey
       AND orders.l_partkey = shipments.l_partkey
       AND orders.l_suppkey = shipments.l_suppkey

 WHERE orders.l_returnflag = 'R';  -- 'R' means refunded.

-- When new data is available, append the data of the 1993 year to the
-- destination table using the INSERT INTO SELECT statement:
INSERT myotherdataset.ordersof93
SELECT *
  FROM myawsdataset.orders
 WHERE l_commitdate >= '1993-01-01'
   AND l_commitdate <= '1993-12-31';
"""

[[cases]]
description = "CREATE TABLE statement: load data across clouds"
input = """
INSERT INTO
 mydataset.orders(
   _PARTITIONTIME,
   id,
   numeric_id)
SELECT
 TIMESTAMP("2023-01-01"),
 id,
 numeric_id,
FROM
 mydataset.ordersof23
WHERE
 numeric_id > 4000000;
"""
formatted = """
INSERT mydataset.orders
  (_PARTITIONTIME, id, numeric_id)
SELECT TIMESTAMP('2023-01-01'), id, numeric_id
  FROM mydataset.ordersof23
 WHERE numeric_id > 4000000
"""

[[cases]]
description = "CREATE TABLE LIKE statement"
input = """
CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable;

CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable
AS SELECT * FROM mydataset.myothertable
"""
formatted = """
CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable;

CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable
AS
SELECT *
  FROM mydataset.myothertable;
"""

[[cases]]
description = "CREATE TABLE COPY statement"
input = """
CREATE TABLE mydataset.newtable
COPY mydataset.sourcetable;

CREATE TABLE if not exists mydataset.newtable
COPY mydataset.sourcetable
OPTIONS (description = "copy table 'source table'")
"""
formatted = """
CREATE TABLE mydataset.newtable
COPY mydataset.sourcetable;

CREATE TABLE IF NOT EXISTS mydataset.newtable
COPY mydataset.sourcetable
OPTIONS (description="copy table 'source table'");
"""

[[cases]]
description = "CREATE SNAPSHOT TABLE statement"
input = """
CREATE SNAPSHOT TABLE `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="my_table_snapshot",
  description="A table snapshot that expires in 2 days",
  labels=[("org_unit", "development")]
);
CREATE SNAPSHOT TABLE IF NOT EXISTS `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="my_table_snapshot",
  description="A table snapshot that expires in 2 days",
  labels=[("org_unit", "development")]
);
"""
formatted = """
CREATE SNAPSHOT TABLE `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'my_table_snapshot',
  description          = 'A table snapshot that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
);

CREATE SNAPSHOT TABLE IF NOT EXISTS `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'my_table_snapshot',
  description          = 'A table snapshot that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
);
"""

[[cases]]
description = "CREATE TABLE CLONE statement"
input = """
CREATE TABLE `myproject.mydataset.mytable`
CLONE `myproject.mydataset.mytablesnapshot`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name="my_table",
  description="A table that expires in 1 year",
  labels=[("org_unit", "development")]
);
CREATE TABLE IF NOT EXISTS `myproject.mydataset.mytableclone`
CLONE `myproject.mydataset.mytable`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name="my_table",
  description="A table that expires in 1 year",
  labels=[("org_unit", "development")]
)
"""
formatted = """
CREATE TABLE `myproject.mydataset.mytable`
CLONE `myproject.mydataset.mytablesnapshot`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name        = 'my_table',
  description          = 'A table that expires in 1 year',
  labels               = [
                           ('org_unit', 'development')
                         ]
);

CREATE TABLE IF NOT EXISTS `myproject.mydataset.mytableclone`
CLONE `myproject.mydataset.mytable`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name        = 'my_table',
  description          = 'A table that expires in 1 year',
  labels               = [
                           ('org_unit', 'development')
                         ]
);
"""

[[cases]]
description = "CREATE VIEW statement"
input = """
CREATE VIEW mydataset.age_groups(age, count) AS SELECT age, COUNT(*)
FROM mydataset.people
group by age;

CREATE VIEW `myproject.mydataset.newview`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="newview",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")]
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;

CREATE VIEW IF NOT EXISTS `myproject.mydataset.newview`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="newview",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")]
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;

CREATE OR REPLACE VIEW `myproject.mydataset.newview`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="newview",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")]
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;
"""
formatted = """
CREATE VIEW mydataset.age_groups
(age, count)
AS
SELECT age, COUNT(*)
  FROM mydataset.people
 GROUP BY age;

CREATE VIEW `myproject.mydataset.newview`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'newview',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;

CREATE VIEW IF NOT EXISTS `myproject.mydataset.newview`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'newview',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;

CREATE OR REPLACE VIEW `myproject.mydataset.newview`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'newview',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;
"""

# Not supported by go-zetasql
# [[cases]]
# description = "CREATE VIEW statement: create a view with column descriptions"
# input = """
# CREATE VIEW `myproject.mydataset.newview` (
#   column_1_new_name OPTIONS (DESCRIPTION='Description of the column 1 contents'),
#   column_2_new_name OPTIONS (DESCRIPTION='Description of the column 2 contents'),
#   column_3_new_name OPTIONS (DESCRIPTION='Description of the column 3 contents')
# )
# AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable;
# """
# formatted = """
# """

[[cases]]
description = "CREATE MATERIALIZED VIEW statement"
input = """
CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="new_mv",
  description="a materialized view that expires in 2 days",
  labels=[("org_unit", "development")],
  enable_refresh=true,
  refresh_interval_minutes=20
)
AS SELECT column_1, SUM(column_2) AS sum_2, AVG(column_3) AS avg_3
FROM `myproject.mydataset.mytable`
GROUP BY column_1;

CREATE MATERIALIZED VIEW IF NOT EXISTS `myproject.mydataset.new_mv`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="new_mv",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")],
  ENABLE_REFRESH=false
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;

CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
PARTITION BY DATE(col_datetime)
CLUSTER BY col_int
AS SELECT col_int, col_datetime, COUNT(1) as cnt
   FROM `myproject.mydataset.mv_base_table`
   GROUP BY col_int, col_datetime
"""
formatted = """
CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
OPTIONS (
  expiration_timestamp     = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name            = 'new_mv',
  description              = 'a materialized view that expires in 2 days',
  labels                   = [
                               ('org_unit', 'development')
                             ],
  enable_refresh           = TRUE,
  refresh_interval_minutes = 20
)
AS
SELECT column_1,
       SUM(column_2) AS sum_2,
       AVG(column_3) AS avg_3
  FROM `myproject.mydataset.mytable`
 GROUP BY column_1;

CREATE MATERIALIZED VIEW IF NOT EXISTS `myproject.mydataset.new_mv`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'new_mv',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ],
  enable_refresh       = FALSE
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;

CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
PARTITION BY DATE(col_datetime)
  CLUSTER BY col_int
AS
SELECT col_int, col_datetime, COUNT(1) AS cnt
  FROM `myproject.mydataset.mv_base_table`
 GROUP BY col_int, col_datetime;
"""

[[cases]]
description = ""
input = """
"""
formatted = """
"""

[[cases]]
description = ""
input = """
"""
formatted = """
"""

[[cases]]
description = ""
input = """
"""
formatted = """
"""
