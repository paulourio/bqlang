# Tests cases of examples from BigQuery's documentation.
[setup]

[setup.print_options]
soft_max_cols = 80
newline_before_clause = true
align_logical_with_clauses = true
align_trailing_comments = true
column_list_trailing_comma = "NEVER"
indentation = 1
indent_with_clause = true
min_joins_to_separate_in_blocks = 1
max_cols_for_single_line_select = 4
function_catalog = "BIGQUERY"
function_name_style = "AS_IS"
identifier_style = "AS_IS"
keyword_style = "UPPER_CASE"
type_style = "UPPER_CASE"
bool_style = "UPPER_CASE"
null_style = "UPPER_CASE"
bytes_style = "PREFER_SINGLE_QUOTE"
string_style = "PREFER_SINGLE_QUOTE"

[[cases]]
description = "CREATE SCHEMA statement"
input = """
-- Creating a new dataset.
CREATE SCHEMA mydataset
OPTIONS(
  location="us",
  default_table_expiration_days=3.75,
  labels=[("label1","value1"),("label2","value2")]
  );

-- Create a case-insensitive dataset.
CREATE SCHEMA mydataset
OPTIONS(
  is_case_insensitive=TRUE
);

-- Create a dataset with collation support.
CREATE SCHEMA mydataset
DEFAULT COLLATE 'und:ci';
"""
formatted = """
-- Creating a new dataset.
CREATE SCHEMA mydataset
OPTIONS (
  location                      = 'us',
  default_table_expiration_days = 3.75,
  labels                        = [
                                    ('label1', 'value1'),
                                    ('label2', 'value2')
                                  ]
);

-- Create a case-insensitive dataset.
CREATE SCHEMA mydataset
OPTIONS (is_case_insensitive=TRUE);

-- Create a dataset with collation support.
CREATE SCHEMA mydataset
DEFAULT COLLATE 'und:ci';
"""

[[cases]]
description = "CREATE TABLE statement: creating a new table"
input = """
CREATE TABLE mydataset.newtable
(
  x INT64 OPTIONS(description="An optional INTEGER field"),
  y STRUCT<
    a ARRAY<STRING> OPTIONS(description="A repeated STRING field"),
    b BOOL
  >
)
PARTITION BY _PARTITIONDATE
OPTIONS(
  expiration_timestamp=TIMESTAMP "2025-01-01 00:00:00 UTC",
  partition_expiration_days=1,
  description="a table that expires in 2025, with each partition living for 24 hours",
  labels=[("org_unit", "development")]
);
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  x INT64 OPTIONS (description='An optional INTEGER field'),
  y STRUCT<
      a ARRAY<
          STRING
        > OPTIONS (description='A repeated STRING field'),
      b BOOL
    >
)
PARTITION BY _PARTITIONDATE
OPTIONS (
  expiration_timestamp      = TIMESTAMP '2025-01-01 00:00:00 UTC',
  partition_expiration_days = 1,
  description               = 'a table that expires in 2025, with each partition living for 24 hours',
  labels                    = [
                                ('org_unit', 'development')
                              ]
)
"""

[[cases]]
description = "CREATE TABLE statement: create a new table from an existing table"
input = """
CREATE TABLE mydataset.top_words
OPTIONS(
  description="Top ten words per Shakespeare corpus"
) AS
SELECT
  corpus,
  ARRAY_AGG(STRUCT(word, word_count) ORDER BY word_count DESC LIMIT 10) AS top_words
FROM bigquery-public-data.samples.shakespeare
GROUP BY corpus;
"""
formatted = """
CREATE TABLE mydataset.top_words
OPTIONS (description='Top ten words per Shakespeare corpus')
AS
SELECT corpus,
       ARRAY_AGG(
         STRUCT(word, word_count)
         ORDER BY word_count DESC
         LIMIT 10
       ) AS top_words
  FROM bigquery-public-data.samples.shakespeare
 GROUP BY corpus
"""

[[cases]]
description = "CREATE TABLE statement: create a table only if the table doesn't exist"
input = """
CREATE TABLE IF NOT EXISTS mydataset.newtable (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
OPTIONS(
  expiration_timestamp=TIMESTAMP "2025-01-01 00:00:00 UTC",
  description="a table that expires in 2025",
  labels=[("org_unit", "development")]
)
"""
formatted = """
CREATE TABLE IF NOT EXISTS mydataset.newtable
(
  x INT64,
  y STRUCT<
      a ARRAY<STRING>,
      b BOOL
    >
)
OPTIONS (
  expiration_timestamp = TIMESTAMP '2025-01-01 00:00:00 UTC',
  description          = 'a table that expires in 2025',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
"""

[[cases]]
description = "CREATE TABLE statement: create or replace a table"
input = """
CREATE OR REPLACE TABLE mydataset.newtable (x INT64, y STRUCT<a ARRAY<STRING>, b BOOL>)
OPTIONS(
  expiration_timestamp=TIMESTAMP "2025-01-01 00:00:00 UTC",
  description="a table that expires in 2025",
  labels=[("org_unit", "development")]
)
"""
formatted = """
CREATE OR REPLACE TABLE mydataset.newtable
(
  x INT64,
  y STRUCT<
      a ARRAY<STRING>,
      b BOOL
    >
)
OPTIONS (
  expiration_timestamp = TIMESTAMP '2025-01-01 00:00:00 UTC',
  description          = 'a table that expires in 2025',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
"""

[[cases]]
description = "CREATE TABLE statement: create a table with REQUIRED column"
input = """
CREATE TABLE mydataset.newtable (
  x INT64 NOT NULL,
  y STRUCT<
    a ARRAY<STRING>,
    b BOOL NOT NULL,
    c FLOAT64
  > NOT NULL,
  z STRING
)
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  x INT64 NOT NULL,
  y STRUCT<
      a ARRAY<STRING>,
      b BOOL NOT NULL,
      c FLOAT64
    > NOT NULL,
  z STRING
)
"""

[[cases]]
description = "CREATE TABLE statement: create a table with collation support"
input = """
CREATE TABLE mydataset.newtable (
  a STRING,
  b STRING,
  c STRUCT<
    x FLOAT64,
    y ARRAY<STRING>
  >
)
DEFAULT COLLATE 'und:ci';

CREATE TABLE mydataset.newtable (
  a STRING,
  b STRING COLLATE 'und:ci',
  c STRUCT<
    x FLOAT64,
    y ARRAY<STRING COLLATE 'und:ci'>
  >
);
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  a STRING,
  b STRING,
  c STRUCT<
      x FLOAT64,
      y ARRAY<STRING>
    >
)
DEFAULT COLLATE 'und:ci';

CREATE TABLE mydataset.newtable
(
  a STRING,
  b STRING COLLATE 'und:ci',
  c STRUCT<
      x FLOAT64,
      y ARRAY<STRING COLLATE 'und:ci'>
    >
);
"""

[[cases]]
description = "CREATE TABLE statement: a table with parameterized data types"
input = """
CREATE TABLE mydataset.newtable (
  x STRING(10),
  y STRUCT<
    a ARRAY<BYTES(5)>,
    b NUMERIC(15, 2) OPTIONS(rounding_mode = 'ROUND_HALF_EVEN'),
    c FLOAT64
  >,
  z BIGNUMERIC(35)
)
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  x STRING(10),
  y STRUCT<
      a ARRAY<BYTES(5)>,
      b NUMERIC(15, 2) OPTIONS (rounding_mode='ROUND_HALF_EVEN'),
      c FLOAT64
    >,
  z BIGNUMERIC(35)
)
"""

[[cases]]
description = "CREATE TABLE statement: create a partitioned table"
input = """
CREATE TABLE mydataset.newtable (transaction_id INT64, transaction_date DATE)
PARTITION BY transaction_date
OPTIONS(
  partition_expiration_days=3,
  description="a table partitioned by transaction_date"
)
"""
formatted = """
CREATE TABLE mydataset.newtable
(
  transaction_id   INT64,
  transaction_date DATE
)
PARTITION BY transaction_date
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table partitioned by transaction_date'
)
"""

[[cases]]
description = "CREATE TABLE statement: a partitioned table from the result of a query"
input = """
CREATE TABLE mydataset.days_with_rain
PARTITION BY date
OPTIONS (
  partition_expiration_days=365,
  description="weather stations with precipitation, partitioned by day"
) AS
SELECT
  DATE(CAST(year AS INT64), CAST(mo AS INT64), CAST(da AS INT64)) AS date,
  (SELECT ANY_VALUE(name) FROM `bigquery-public-data.noaa_gsod.stations` AS stations
   WHERE stations.usaf = stn) AS station_name,  -- Stations can have multiple names
  prcp
FROM `bigquery-public-data.noaa_gsod.gsod2017` AS weather
WHERE prcp != 99.9  -- Filter unknown values
  AND prcp > 0      -- Filter stations/days with no precipitation
"""
formatted = """
CREATE TABLE mydataset.days_with_rain
PARTITION BY date
OPTIONS (
  partition_expiration_days = 365,
  description               = 'weather stations with precipitation, partitioned by day'
)
AS
SELECT DATE(
         CAST(year AS INT64),
         CAST(mo AS INT64),
         CAST(da AS INT64)
       ) AS date,
       (
         SELECT ANY_VALUE(name)
           FROM `bigquery-public-data.noaa_gsod.stations` AS stations
          WHERE stations.usaf = stn
       ) AS station_name,  -- Stations can have multiple names
       prcp
  FROM `bigquery-public-data.noaa_gsod.gsod2017` AS weather
 WHERE prcp != 99.9  -- Filter unknown values
   AND prcp >  0     -- Filter stations/days with no precipitation
"""

[[cases]]
description = "CREATE TABLE statement: create a clustered table"
input = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp TIMESTAMP,
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
);
CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY
  customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
);
CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
CLUSTER BY
  customer_id
OPTIONS (
  description="a table clustered by customer_id"
);
"""
formatted = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp          TIMESTAMP,
  customer_id        STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
  CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table clustered by customer_id'
);

CREATE TABLE mydataset.myclusteredtable
(
  customer_id        STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(_PARTITIONTIME)
  CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table clustered by customer_id'
);

CREATE TABLE mydataset.myclusteredtable
(
  customer_id        STRING,
  transaction_amount NUMERIC
)
CLUSTER BY customer_id
OPTIONS (description='a table clustered by customer_id');
"""

[[cases]]
description = "CREATE TABLE statemtent: a clustered table from the result of a query"
input = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp TIMESTAMP,
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
CLUSTER BY
  customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
)
AS SELECT * FROM mydataset.myothertable;

CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
CLUSTER BY
  customer_id
OPTIONS (
  description="a table clustered by customer_id"
)
AS SELECT * FROM mydataset.myothertable
"""
formatted = """
CREATE TABLE mydataset.myclusteredtable
(
  timestamp          TIMESTAMP,
  customer_id        STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(timestamp)
  CLUSTER BY customer_id
OPTIONS (
  partition_expiration_days = 3,
  description               = 'a table clustered by customer_id'
)
AS
SELECT *
  FROM mydataset.myothertable;

CREATE TABLE mydataset.myclusteredtable
(
  customer_id        STRING,
  transaction_amount NUMERIC
)
CLUSTER BY customer_id
OPTIONS (description='a table clustered by customer_id')
AS
SELECT *
  FROM mydataset.myothertable;
"""

[[cases]]
description = "CREATE TABLE statement: create a temporary table"
input = """
CREATE TEMP TABLE Example
(
  x INT64,
  y STRING
);

INSERT INTO Example
VALUES (5, 'foo');

INSERT INTO Example
VALUES (6, 'bar');

SELECT *
FROM Example;
"""
formatted = """
CREATE TEMPORARY TABLE Example
(
  x INT64,
  y STRING
);

INSERT Example
VALUES
  (5, 'foo');

INSERT Example
VALUES
  (6, 'bar');

SELECT *
  FROM Example;
"""

[[cases]]
description = "CREATE TABLE statement: load data across clouds"
input = """
-- First, display information about the myawsdataset.orders table:
SELECT
  table_name, ddl
FROM
  `myproject`.myawsdataset.INFORMATION_SCHEMA.TABLES
WHERE
  table_name = 'orders';

-- Next, display information about the myotherdataset.shipments table:
SELECT
  table_name, ddl
FROM
  `myproject`.myotherdataset.INFORMATION_SCHEMA.TABLES
WHERE
  table_name = 'shipments';

-- Now, using the CREATE TABLE AS SELECT statement you can selectively
-- load data to the myotherdataset.ordersof92 table in the US multi-region:
CREATE OR REPLACE TABLE
  myotherdataset.ordersof92 AS
SELECT
  *
FROM
  myawsdataset.orders
WHERE
  l_commitdate >= '1992-01-01'
AND
   l_commitdate <= '1992-12-31';

-- You can then perform a join operation with the newly created tables using wildcards:
SELECT
  orders.l_orderkey,
  orders.l_orderkey,
  orders.l_suppkey,
  orders.l_commitdate,
  orders.l_returnflag,
  shipments.l_shipmode,
  shipments.l_shipinstruct
FROM
  myotherdataset.shipments
JOIN
  `myotherdataset.ordersof*` as orders
ON
  orders.l_orderkey = shipments.l_orderkey
AND orders.l_partkey = shipments.l_partkey
AND orders.l_suppkey = shipments.l_suppkey
WHERE orders.l_returnflag = 'R'; -- 'R' means refunded.

-- When new data is available, append the data of the 1993 year to the
-- destination table using the INSERT INTO SELECT statement:
INSERT INTO
   myotherdataset.ordersof93
 SELECT
   *
 FROM
   myawsdataset.orders
 WHERE
   l_commitdate >= '1993-01-01'
   AND l_commitdate <= '1993-12-31';
"""
formatted = """
-- First, display information about the myawsdataset.orders table:
SELECT table_name, ddl
  FROM `myproject`.myawsdataset.INFORMATION_SCHEMA.TABLES
 WHERE table_name = 'orders';

-- Next, display information about the myotherdataset.shipments table:
SELECT table_name, ddl
  FROM `myproject`.myotherdataset.INFORMATION_SCHEMA.TABLES
 WHERE table_name = 'shipments';

-- Now, using the CREATE TABLE AS SELECT statement you can selectively
-- load data to the myotherdataset.ordersof92 table in the US multi-region:
CREATE OR REPLACE TABLE myotherdataset.ordersof92
AS
SELECT *
  FROM myawsdataset.orders
 WHERE l_commitdate >= '1992-01-01'
   AND l_commitdate <= '1992-12-31';

-- You can then perform a join operation with the newly created tables using wildcards:
SELECT orders.l_orderkey,
       orders.l_orderkey,
       orders.l_suppkey,
       orders.l_commitdate,
       orders.l_returnflag,
       shipments.l_shipmode,
       shipments.l_shipinstruct
  FROM myotherdataset.shipments

       JOIN
       `myotherdataset.ordersof*` AS orders
       ON  orders.l_orderkey = shipments.l_orderkey
       AND orders.l_partkey = shipments.l_partkey
       AND orders.l_suppkey = shipments.l_suppkey

 WHERE orders.l_returnflag = 'R';  -- 'R' means refunded.

-- When new data is available, append the data of the 1993 year to the
-- destination table using the INSERT INTO SELECT statement:
INSERT myotherdataset.ordersof93
SELECT *
  FROM myawsdataset.orders
 WHERE l_commitdate >= '1993-01-01'
   AND l_commitdate <= '1993-12-31';
"""

[[cases]]
description = "CREATE TABLE statement: load data across clouds"
input = """
INSERT INTO
 mydataset.orders(
   _PARTITIONTIME,
   id,
   numeric_id)
SELECT
 TIMESTAMP("2023-01-01"),
 id,
 numeric_id,
FROM
 mydataset.ordersof23
WHERE
 numeric_id > 4000000;
"""
formatted = """
INSERT mydataset.orders
  (_PARTITIONTIME, id, numeric_id)
SELECT TIMESTAMP('2023-01-01'), id, numeric_id
  FROM mydataset.ordersof23
 WHERE numeric_id > 4000000
"""

[[cases]]
description = "CREATE TABLE LIKE statement"
input = """
CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable;

CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable
AS SELECT * FROM mydataset.myothertable
"""
formatted = """
CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable;

CREATE TABLE mydataset.newtable
LIKE mydataset.sourcetable
AS
SELECT *
  FROM mydataset.myothertable;
"""

[[cases]]
description = "CREATE TABLE COPY statement"
input = """
CREATE TABLE mydataset.newtable
COPY mydataset.sourcetable;

CREATE TABLE if not exists mydataset.newtable
COPY mydataset.sourcetable
OPTIONS (description = "copy table 'source table'")
"""
formatted = """
CREATE TABLE mydataset.newtable
COPY mydataset.sourcetable;

CREATE TABLE IF NOT EXISTS mydataset.newtable
COPY mydataset.sourcetable
OPTIONS (description="copy table 'source table'");
"""

[[cases]]
description = "CREATE SNAPSHOT TABLE statement"
input = """
CREATE SNAPSHOT TABLE `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="my_table_snapshot",
  description="A table snapshot that expires in 2 days",
  labels=[("org_unit", "development")]
);
CREATE SNAPSHOT TABLE IF NOT EXISTS `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="my_table_snapshot",
  description="A table snapshot that expires in 2 days",
  labels=[("org_unit", "development")]
);
"""
formatted = """
CREATE SNAPSHOT TABLE `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'my_table_snapshot',
  description          = 'A table snapshot that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
);

CREATE SNAPSHOT TABLE IF NOT EXISTS `myproject.mydataset.mytablesnapshot`
CLONE `myproject.mydataset.mytable`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'my_table_snapshot',
  description          = 'A table snapshot that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
);
"""

[[cases]]
description = "CREATE TABLE CLONE statement"
input = """
CREATE TABLE `myproject.mydataset.mytable`
CLONE `myproject.mydataset.mytablesnapshot`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name="my_table",
  description="A table that expires in 1 year",
  labels=[("org_unit", "development")]
);
CREATE TABLE IF NOT EXISTS `myproject.mydataset.mytableclone`
CLONE `myproject.mydataset.mytable`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name="my_table",
  description="A table that expires in 1 year",
  labels=[("org_unit", "development")]
)
"""
formatted = """
CREATE TABLE `myproject.mydataset.mytable`
CLONE `myproject.mydataset.mytablesnapshot`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name        = 'my_table',
  description          = 'A table that expires in 1 year',
  labels               = [
                           ('org_unit', 'development')
                         ]
);

CREATE TABLE IF NOT EXISTS `myproject.mydataset.mytableclone`
CLONE `myproject.mydataset.mytable`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name        = 'my_table',
  description          = 'A table that expires in 1 year',
  labels               = [
                           ('org_unit', 'development')
                         ]
);
"""

[[cases]]
description = "CREATE VIEW statement"
input = """
CREATE VIEW mydataset.age_groups(age, count) AS SELECT age, COUNT(*)
FROM mydataset.people
group by age;

CREATE VIEW `myproject.mydataset.newview`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="newview",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")]
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;

CREATE VIEW IF NOT EXISTS `myproject.mydataset.newview`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="newview",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")]
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;

CREATE OR REPLACE VIEW `myproject.mydataset.newview`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="newview",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")]
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;
"""
formatted = """
CREATE VIEW mydataset.age_groups
(age, count)
AS
SELECT age, COUNT(*)
  FROM mydataset.people
 GROUP BY age;

CREATE VIEW `myproject.mydataset.newview`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'newview',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;

CREATE VIEW IF NOT EXISTS `myproject.mydataset.newview`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'newview',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;

CREATE OR REPLACE VIEW `myproject.mydataset.newview`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'newview',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ]
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;
"""

# Not supported by go-zetasql
# [[cases]]
# description = "CREATE VIEW statement: create a view with column descriptions"
# input = """
# CREATE VIEW `myproject.mydataset.newview` (
#   column_1_new_name OPTIONS (DESCRIPTION='Description of the column 1 contents'),
#   column_2_new_name OPTIONS (DESCRIPTION='Description of the column 2 contents'),
#   column_3_new_name OPTIONS (DESCRIPTION='Description of the column 3 contents')
# )
# AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable;
# """
# formatted = """
# """

[[cases]]
description = "CREATE MATERIALIZED VIEW statement"
input = """
CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="new_mv",
  description="a materialized view that expires in 2 days",
  labels=[("org_unit", "development")],
  enable_refresh=true,
  refresh_interval_minutes=20
)
AS SELECT column_1, SUM(column_2) AS sum_2, AVG(column_3) AS avg_3
FROM `myproject.mydataset.mytable`
GROUP BY column_1;

CREATE MATERIALIZED VIEW IF NOT EXISTS `myproject.mydataset.new_mv`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name="new_mv",
  description="a view that expires in 2 days",
  labels=[("org_unit", "development")],
  ENABLE_REFRESH=false
)
AS SELECT column_1, column_2, column_3 FROM `myproject.mydataset.mytable`;

CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
PARTITION BY DATE(col_datetime)
CLUSTER BY col_int
AS SELECT col_int, col_datetime, COUNT(1) as cnt
   FROM `myproject.mydataset.mv_base_table`
   GROUP BY col_int, col_datetime
"""
formatted = """
CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
OPTIONS (
  expiration_timestamp     = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name            = 'new_mv',
  description              = 'a materialized view that expires in 2 days',
  labels                   = [
                               ('org_unit', 'development')
                             ],
  enable_refresh           = TRUE,
  refresh_interval_minutes = 20
)
AS
SELECT column_1,
       SUM(column_2) AS sum_2,
       AVG(column_3) AS avg_3
  FROM `myproject.mydataset.mytable`
 GROUP BY column_1;

CREATE MATERIALIZED VIEW IF NOT EXISTS `myproject.mydataset.new_mv`
OPTIONS (
  expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR),
  friendly_name        = 'new_mv',
  description          = 'a view that expires in 2 days',
  labels               = [
                           ('org_unit', 'development')
                         ],
  enable_refresh       = FALSE
)
AS
SELECT column_1, column_2, column_3
  FROM `myproject.mydataset.mytable`;

CREATE MATERIALIZED VIEW `myproject.mydataset.new_mv`
PARTITION BY DATE(col_datetime)
  CLUSTER BY col_int
AS
SELECT col_int, col_datetime, COUNT(1) AS cnt
  FROM `myproject.mydataset.mv_base_table`
 GROUP BY col_int, col_datetime;
"""

[[cases]]
description = "CREATE EXTERNAL TABLE statement"
input = """
CREATE EXTERNAL TABLE dataset.CsvTable OPTIONS (
  format = 'CSV',
  uris = ['gs://bucket/path1.csv', 'gs://bucket/path2.csv']
);

CREATE OR REPLACE EXTERNAL TABLE dataset.CsvTable
(
  x INT64,
  y STRING
)
OPTIONS (
  format = 'CSV',
  uris = ['gs://bucket/path1.csv'],
  field_delimiter = '|',
  max_bad_records = 5
);

CREATE EXTERNAL TABLE dataset.AutoHivePartitionedTable
WITH PARTITION COLUMNS
OPTIONS (
  uris = ['gs://bucket/path/*'],
  format = 'PARQUET',
  hive_partition_uri_prefix = 'gs://bucket/path',
  require_hive_partition_filter = false);

CREATE EXTERNAL TABLE dataset.CustomHivePartitionedTable
WITH PARTITION COLUMNS (
  field_1 STRING, -- column order must match the external path
  field_2 INT64)
OPTIONS (
  uris = ['gs://bucket/path/*'],
  format = 'PARQUET',
  hive_partition_uri_prefix = 'gs://bucket/path',
  require_hive_partition_filter = false);
"""
formatted = """
CREATE EXTERNAL TABLE dataset.CsvTable
OPTIONS (
  format = 'CSV',
  uris   = ['gs://bucket/path1.csv', 'gs://bucket/path2.csv']
);

CREATE OR REPLACE EXTERNAL TABLE dataset.CsvTable
(
  x INT64,
  y STRING
)
OPTIONS (
  format          = 'CSV',
  uris            = ['gs://bucket/path1.csv'],
  field_delimiter = '|',
  max_bad_records = 5
);

CREATE EXTERNAL TABLE dataset.AutoHivePartitionedTable
WITH PARTITION COLUMNS
OPTIONS (
  uris                          = ['gs://bucket/path/*'],
  format                        = 'PARQUET',
  hive_partition_uri_prefix     = 'gs://bucket/path',
  require_hive_partition_filter = FALSE
);

CREATE EXTERNAL TABLE dataset.CustomHivePartitionedTable
WITH PARTITION COLUMNS
(
  field_1 STRING,  -- column order must match the external path
  field_2 INT64
)
OPTIONS (
  uris                          = ['gs://bucket/path/*'],
  format                        = 'PARQUET',
  hive_partition_uri_prefix     = 'gs://bucket/path',
  require_hive_partition_filter = FALSE
);
"""

[[cases]]
description = "CREATE EXTERNAL TABLE statement with connection"
input = """
CREATE OR REPLACE EXTERNAL TABLE mydataset.newtable (x INT64, y STRING, z BOOL)
WITH CONNECTION myconnection
  OPTIONS(
    format ="PARQUET",
    max_staleness = STALENESS_INTERVAL,
    metadata_cache_mode = 'AUTOMATIC');
"""
formatted = """
CREATE OR REPLACE EXTERNAL TABLE mydataset.newtable
(
  x INT64,
  y STRING,
  z BOOL
)
WITH CONNECTION myconnection
OPTIONS (
  format              = 'PARQUET',
  max_staleness       = STALENESS_INTERVAL,
  metadata_cache_mode = 'AUTOMATIC'
)
"""

[[cases]]
description = "CREATE FUNCTION statement: SQL UDF"
input = """
CREATE FUNCTION mydataset.multiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
AS (x * y);
"""
formatted = """
CREATE FUNCTION mydataset.multiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
AS (
  x * y
)
"""

[[cases]]
description = "CREATE FUNCTION statement: JavaScript UDF"
input = """
CREATE TEMP FUNCTION multiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
LANGUAGE js
AS r\"""
  return x*y;
\""";

SELECT multiplyInputs(a, b) FROM (SELECT 3 as a, 2 as b);
"""
formatted = """
CREATE TEMPORARY FUNCTION multiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
LANGUAGE js
AS r'''
  return x*y;
''';

SELECT multiplyInputs(a, b)
  FROM (
         SELECT 3 AS a,
                2 AS b
       );
"""

[[cases]]
description = "CREATE FUNCTION statement: remote function"
input = """
CREATE FUNCTION mydataset.remoteMultiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
REMOTE WITH CONNECTION us.myconnection
OPTIONS(endpoint="https://us-central1-myproject.cloudfunctions.net/multiply");
"""
formatted = """
CREATE FUNCTION mydataset.remoteMultiplyInputs(x FLOAT64, y FLOAT64)
RETURNS FLOAT64
REMOTE WITH CONNECTION us.myconnection
OPTIONS (endpoint='https://us-central1-myproject.cloudfunctions.net/multiply')
"""

[[cases]]
description = "CREATE TABLE FUNCTION statement"
input = """
CREATE OR REPLACE TABLE FUNCTION mydataset.names_by_year(y INT64)
AS
  SELECT year, name, SUM(number) AS total
  FROM `bigquery-public-data.usa_names.usa_1910_current`
  WHERE year = y
  GROUP BY year, name;

CREATE OR REPLACE TABLE FUNCTION mydataset.names_by_year(y INT64)
RETURNS TABLE<name STRING, year INT64, total INT64>
AS
  SELECT year, name, SUM(number) AS total
  FROM `bigquery-public-data.usa_names.usa_1910_current`
  WHERE year = y
  GROUP BY year, name;

CREATE OR REPLACE TABLE FUNCTION mydataset.names_by_year(y INT64)
RETURNS TABLE<name STRING(10), year INT64, total INT64>
AS
  SELECT year, name, SUM(number) AS total
  FROM `bigquery-public-data.usa_names.usa_1910_current`
  WHERE year = y
  GROUP BY year, name
"""
formatted = """
CREATE OR REPLACE TABLE FUNCTION mydataset.names_by_year(y INT64)
AS
SELECT year, name, SUM(number) AS total
  FROM `bigquery-public-data.usa_names.usa_1910_current`
 WHERE year = y
 GROUP BY year, name;

CREATE OR REPLACE TABLE FUNCTION mydataset.names_by_year(y INT64)
RETURNS TABLE<name STRING, year INT64, total INT64>
AS
SELECT year, name, SUM(number) AS total
  FROM `bigquery-public-data.usa_names.usa_1910_current`
 WHERE year = y
 GROUP BY year, name;

CREATE OR REPLACE TABLE FUNCTION mydataset.names_by_year(y INT64)
RETURNS
  TABLE<
    name  STRING(10),
    year  INT64,
    total INT64
  >
AS
SELECT year, name, SUM(number) AS total
  FROM `bigquery-public-data.usa_names.usa_1910_current`
 WHERE year = y
 GROUP BY year, name;
"""

[[cases]]
description = "CREATE PROCEDURE statement"
input = """
CREATE PROCEDURE myProject.myDataset.QueryTable()
BEGIN
  SELECT * FROM anotherDataset.myTable;
END;

CREATE PROCEDURE mydataset.AddDelta(INOUT x INT64, delta INT64)
BEGIN
  SET x = x + delta;
END;
"""
formatted = """
CREATE PROCEDURE myProject.myDataset.QueryTable()
BEGIN
  SELECT *
    FROM anotherDataset.myTable;
END;

CREATE PROCEDURE mydataset.AddDelta(INOUT x INT64, delta INT64)
BEGIN
  SET x = x + delta;
END;
"""

[[cases]]
description = ""
input = """
DECLARE accumulator INT64 DEFAULT 0;
CALL mydataset.AddDelta(accumulator, 5);
CALL mydataset.AddDelta((select 1), 3);
SELECT accumulator;

CREATE PROCEDURE mydataset.SelectFromTablesAndAppend(
  target_date DATE, OUT rows_added INT64)
BEGIN
  CREATE TEMP TABLE DataForTargetDate AS
  SELECT t1.id, t1.x, t2.y
  FROM dataset.partitioned_table1 AS t1
  JOIN dataset.partitioned_table2 AS t2
  ON t1.id = t2.id
  WHERE t1.date = target_date
    AND t2.date = target_date;

  SET rows_added = (SELECT COUNT(*) FROM DataForTargetDate);

  SELECT id, x, y, target_date  -- note that target_date is a parameter
  FROM DataForTargetDate;

  DROP TABLE DataForTargetDate;
END;

DECLARE rows_added INT64;
CALL mydataset.SelectFromTablesAndAppend(CURRENT_DATE(), rows_added);
SELECT FORMAT('Added %d rows', rows_added);
"""
formatted = """
DECLARE accumulator INT64 DEFAULT 0;

CALL mydataset.AddDelta(accumulator, 5);

CALL mydataset.AddDelta(
  (
    SELECT 1
  ),
  3
);

SELECT accumulator;

CREATE PROCEDURE mydataset.SelectFromTablesAndAppend(target_date DATE, OUT rows_added INT64)
BEGIN
  CREATE TEMPORARY TABLE DataForTargetDate
  AS
  SELECT t1.id, t1.x, t2.y
    FROM dataset.partitioned_table1 AS t1

         JOIN
         dataset.partitioned_table2 AS t2
         ON t1.id = t2.id

   WHERE t1.date = target_date
     AND t2.date = target_date;

  SET rows_added = (
    SELECT COUNT(*)
      FROM DataForTargetDate
  );

  SELECT id,
         x,
         y,
         target_date  -- note that target_date is a parameter
    FROM DataForTargetDate;

  DROP TABLE DataForTargetDate;
END;

DECLARE rows_added INT64;

CALL mydataset.SelectFromTablesAndAppend(CURRENT_DATE(), rows_added);

SELECT FORMAT('Added %d rows', rows_added);
"""

[[cases]]
description = "ALTER TABLE SET OPTIONS statement"
input = """
ALTER TABLE mydataset.mytable
SET OPTIONS (
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 7 DAY),
  description="Table that expires seven days from now"
)
"""
formatted = """
ALTER TABLE mydataset.mytable
  SET OPTIONS (
        expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 7 DAY),
        description          = 'Table that expires seven days from now'
      )
"""

[[cases]]
description = "ALTER TABLE ADD COLUMN statement"
input = """
alter table mydataset.mytable
  add column a string,
  add column if not exists b geography,
  add column c array<numeric>,
  add column d date options(description="my description")
"""
formatted = """
ALTER TABLE mydataset.mytable
  ADD COLUMN a STRING,
  ADD COLUMN IF NOT EXISTS b GEOGRAPHY,
  ADD COLUMN c ARRAY<NUMERIC>,
  ADD COLUMN d DATE OPTIONS (description='my description')
"""

[[cases]]
description = "ALTER TABLE ADD PRIMARY KEY statement"
input = """
ALTER TABLE pk_table
ADD PRIMARY KEY (x,y) NOT ENFORCED;

CREATE TABLE fk_table(x int64, y int64, i int64, j int64, u int64, v int64);

ALTER TABLE fk_table
ADD CONSTRAINT my_fk_name FOREIGN KEY (u, v)
REFERENCES pk_table(x, y) NOT ENFORCED
"""
formatted = """
ALTER TABLE pk_table
  ADD PRIMARY KEY (x, y) NOT ENFORCED;

CREATE TABLE fk_table
(
  x INT64,
  y INT64,
  i INT64,
  j INT64,
  u INT64,
  v INT64
);

ALTER TABLE fk_table
  ADD CONSTRAINT my_fk_name FOREIGN KEY (u, v)
  REFERENCES pk_table(x, y) NOT ENFORCED;
"""

[[cases]]
description = "ALTER TABLE ADD PRIMARY KEY statement"
input = """
ALTER TABLE pk_table ADD PRIMARY KEY (x,y) NOT ENFORCED;
"""
formatted = """
ALTER TABLE pk_table
  ADD PRIMARY KEY (x, y) NOT ENFORCED
"""

[[cases]]
description = "ALTER TABLE RENAMET TO statement"
input = """
ALTER TABLE mydataset.mytable RENAME TO mynewtable
"""
formatted = """
ALTER TABLE mydataset.mytable
  RENAME TO mynewtable
"""

[[cases]]
description = "ALTER TABLE RENAME COLUMN statement"
input = """
ALTER TABLE mydataset.mytable
  RENAME COLUMN A TO columnA,
  RENAME COLUMN IF EXISTS B TO columnB;

ALTER TABLE mydataset.mytable
  RENAME COLUMN columnA TO temp,
  RENAME COLUMN columnB TO columnA,
  RENAME COLUMN temp TO columnB
"""
formatted = """
ALTER TABLE mydataset.mytable
  RENAME COLUMN A TO columnA,
  RENAME COLUMN IF EXISTS B TO columnB;

ALTER TABLE mydataset.mytable
  RENAME COLUMN columnA TO temp,
  RENAME COLUMN columnB TO columnA,
  RENAME COLUMN temp TO columnB;
"""

[[cases]]
description = "ALTER TABLE DROP COLUMN statement"
input = """
ALTER TABLE mydataset.mytable
  DROP COLUMN A,
  DROP COLUMN IF EXISTS B
"""
formatted = """
ALTER TABLE mydataset.mytable
  DROP COLUMN A,
  DROP COLUMN IF EXISTS B
"""

[[cases]]
description = "ALTER TABLE DROP CONSTRAINT statement"
input = """
ALTER TABLE mytable DROP CONSTRAINT myConstraint;
"""
formatted = """
ALTER TABLE mytable
  DROP CONSTRAINT myConstraint
"""

[[cases]]
description = "ALTER TABLE DROP PRIMARY KEY"
input = """
ALTER TABLE myTable
DROP PRIMARY KEY;
"""
formatted = """
ALTER TABLE myTable
  DROP PRIMARY KEY
"""

[[cases]]
description = "ALTER TABLE SET DEFAULT COLLATE statement"
input = """
ALTER TABLE
  table_name
  SET DEFAULT COLLATE 'abc'
"""
formatted = """
ALTER TABLE table_name
  SET DEFAULT COLLATE 'abc'
"""

[[cases]]
description = "ALTER TABLE SET DEFAULT COLLATE statement"
input = """
CREATE TABLE mydataset.mytable
(
  number INT64,
  word STRING
) DEFAULT COLLATE 'und:ci';

ALTER TABLE mydataset.mytable
SET DEFAULT COLLATE '';

ALTER TABLE mydataset.mytable
ADD COLUMN name STRING;
"""
formatted = """
CREATE TABLE mydataset.mytable
(
  number INT64,
  word   STRING
)
DEFAULT COLLATE 'und:ci';

ALTER TABLE mydataset.mytable
  SET DEFAULT COLLATE '';

ALTER TABLE mydataset.mytable
  ADD COLUMN name STRING;
"""

[[cases]]
description = "ALTER SCHEMA statement"
input = """
ALTER SCHEMA mydataset
SET OPTIONS(
  default_table_expiration_days=3.75
  );

ALTER SCHEMA mydataset
SET OPTIONS(
  is_case_insensitive=TRUE
);

ALTER SCHEMA mydataset
SET OPTIONS(
  default_table_expiration_days=3.75,
  is_case_insensitive=true)
"""
formatted = """
ALTER SCHEMA mydataset
  SET OPTIONS (default_table_expiration_days=3.75);

ALTER SCHEMA mydataset
  SET OPTIONS (is_case_insensitive=TRUE);

ALTER SCHEMA mydataset
  SET OPTIONS (
        default_table_expiration_days = 3.75,
        is_case_insensitive           = TRUE
      );
"""

[[cases]]
description = "ALTER COLUMN SET OPTIONS statement"
input = """
ALTER TABLE mydataset.mytable
ALTER COLUMN price
SET OPTIONS (description = 'Price per unit');

ALTER VIEW mydataset.myview
ALTER COLUMN IF EXISTS total
SET OPTIONS (description = 'Total sales of the product');
"""
formatted = """
ALTER TABLE mydataset.mytable
  ALTER COLUMN price
    SET OPTIONS (description='Price per unit');

ALTER VIEW mydataset.myview
  ALTER COLUMN IF EXISTS total
    SET OPTIONS (description='Total sales of the product');
"""

[[cases]]
description = "ALTER COLUMN DROP NOT NULL statement"
input = """
ALTER TABLE mydataset.mytable
  ALTER COLUMN price DROP NOT NULL;

ALTER TABLE mydataset.mytable
  ALTER COLUMN if exists price DROP NOT NULL
"""
formatted = """
ALTER TABLE mydataset.mytable
  ALTER COLUMN price
    DROP NOT NULL;

ALTER TABLE mydataset.mytable
  ALTER COLUMN IF EXISTS price
    DROP NOT NULL;
"""

[[cases]]
description = "ALTER COLUMN SET DATA TYPE statement"
input = """
ALTER TABLE table_name
ALTER COLUMN column_name SET DATA TYPE NUMERIC;

ALTER TABLE table_name
ALTER COLUMN if exists column_name SET DATA TYPE NUMERIC
"""
formatted = """
ALTER TABLE table_name
  ALTER COLUMN column_name
    SET DATA TYPE NUMERIC;

ALTER TABLE table_name
  ALTER COLUMN IF EXISTS column_name
    SET DATA TYPE NUMERIC;
"""

[[cases]]
description = "ALTER COLUMN SET DEFAULT statement"
input = """
ALTER TABLE mydataset.mytable
ALTER COLUMN mycolumn
SET DEFAULT CURRENT_TIME();
"""
formatted = """
ALTER TABLE mydataset.mytable
  ALTER COLUMN mycolumn
    SET DEFAULT CURRENT_TIME()
"""

[[cases]]
description = "ALTER COLUMN DROP DEFAULT statement"
input = """
ALTER TABLE mydataset.mytable
ALTER COLUMN mycolumn
DROP DEFAULT;
"""
formatted = """
ALTER TABLE mydataset.mytable
  ALTER COLUMN mycolumn
    DROP DEFAULT
"""

[[cases]]
description = "ALTER VIEW SET OPTIONS statement"
input = """
ALTER VIEW mydataset.myview
SET OPTIONS (
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 7 DAY),
  description="View that expires seven days from now"
)
"""
formatted = """
ALTER VIEW mydataset.myview
  SET OPTIONS (
        expiration_timestamp = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 7 DAY),
        description          = 'View that expires seven days from now'
      )
"""

[[cases]]
description = "ALTER MATERIALIZED VIEW SET OPTIONS statement"
input = """
ALTER MATERIALIZED VIEW mydataset.my_mv
SET OPTIONS (
  enable_refresh=true,
  refresh_interval_minutes=20
)
"""
formatted = """
ALTER MATERIALIZED VIEW mydataset.my_mv
  SET OPTIONS (
        enable_refresh           = TRUE,
        refresh_interval_minutes = 20
      )
"""
